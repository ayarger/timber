// Copyright Yarn Spinner Pty Ltd
// Licensed under the MIT License. See LICENSE.md in project root for license information.

// Uncomment to ensure that all expressions have a known type at compile time
// #define VALIDATE_ALL_EXPRESSIONS

namespace Yarn.Compiler
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using Antlr4.Runtime;
    using Antlr4.Runtime.Tree;
    using static Yarn.Instruction.Types;

    /// <summary>
    /// Compiles Yarn code.
    /// </summary>
    public class Compiler : YarnSpinnerParserBaseListener
    {
        private int labelCount = 0;

        /// <summary>
        /// Gets the current node to which instructions are being added.
        /// </summary>
        /// <value>The current node.</value>
        internal Node CurrentNode { get; private set; }

        /// <summary>
        /// Gets the current debug information that describes <see
        /// cref="CurrentNode"/>.
        /// </summary>
        private DebugInfo CurrentDebugInfo { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether we are currently parsing the
        /// current node as a 'raw text' node, or as a fully syntactic node.
        /// </summary>
        /// <value>Whether this is a raw text node or not.</value>
        internal bool RawTextNode { get; set; } = false;

        /// <summary>
        /// Gets the program being generated by the compiler.
        /// </summary>
        internal Program Program { get; private set; }

        internal IList<DebugInfo> DebugInfos { get; private set; } = new List<DebugInfo>();

        internal FileParseResult fileParseResult { get; private set; }

        /// <summary>
        /// The list of variable declarations known to the compiler.
        /// </summary>
        /// <remarks>
        /// This is supplied as part of a <see cref="CompilationJob"/>, or by
        /// <see cref="GetDeclarations"/>.
        /// </remarks>
        internal IEnumerable<Declaration> VariableDeclarations = new List<Declaration>();

        /// <summary>
        /// The Library, which contains the function declarations known to the
        /// compiler.
        /// </summary>
        /// <remarks>
        /// This is supplied as part of a <see cref="CompilationJob"/>.
        /// </remarks>
        internal Library Library { get; private set; }

        /// <summary>
        /// Gets the list of new <see cref="Diagnostic"/> objects created during
        /// code generation.
        /// </summary>
        /// <remarks>
        /// This does not include any existing diagnostics, such as parse
        /// errors.
        /// </remarks>
        internal IEnumerable<Diagnostic> Diagnostics { get => this.diagnostics; }

        private List<Diagnostic> diagnostics = new List<Diagnostic>();

        // the list of nodes we have to ensure we track visitation
        private HashSet<string> TrackingNodes;

        // the list of the names of nodes we have said to skip
        private HashSet<string> SkipNodes;

        /// <summary>
        /// Initializes a new instance of the <see cref="Compiler"/> class.
        /// </summary>
        /// <param name="fileParseResult">The file parse result to use.</param>
        internal Compiler(FileParseResult fileParseResult)
        {
            this.Program = new Program();
            this.fileParseResult = fileParseResult;
        }

#if DEBUG
        internal string parseTree;
        internal List<string> tokens;
#endif

        /// <summary>
        /// Compiles Yarn code, as specified by a compilation job.
        /// </summary>
        /// <param name="compilationJob">The compilation job to perform.</param>
        /// <returns>The results of the compilation.</returns>
        /// <seealso cref="CompilationJob"/>
        /// <seealso cref="CompilationResult"/>
        public static CompilationResult Compile(CompilationJob compilationJob)
        {
            var results = new List<CompilationResult>();

            // I think it is bad that we have two variables with identical behaviours and almost identical data
            // we should merge these or at least remove the needed duplication of work

            // All variable declarations that we've encountered during this
            // compilation job
            var derivedVariableDeclarations = new List<Declaration>();

            // All variable declarations that we've encountered, PLUS the
            // ones we knew about before
            var knownVariableDeclarations = new List<Declaration>();

            // All type definitions that we've encountered while parsing.
            var typeDeclarations = new List<IType>(BuiltinTypes.AllBuiltinTypes);

            if (compilationJob.VariableDeclarations != null)
            {
                knownVariableDeclarations.AddRange(compilationJob.VariableDeclarations);
            }

            var diagnostics = new List<Diagnostic>();
            {
                // Get function declarations from the Standard Library
                (IEnumerable<Declaration> declarations, IEnumerable<Diagnostic> declarationDiagnostics) = GetDeclarationsFromLibrary(new Dialogue.StandardLibrary());

                diagnostics.AddRange(declarationDiagnostics);

                knownVariableDeclarations.AddRange(declarations);
            }

            // Get function declarations from the library, if provided
            if (compilationJob.Library != null)
            {
                (IEnumerable<Declaration> declarations, IEnumerable<Diagnostic> declarationDiagnostics) = GetDeclarationsFromLibrary(compilationJob.Library);
                knownVariableDeclarations.AddRange(declarations);
                diagnostics.AddRange(declarationDiagnostics);
            }

            var parsedFiles = new List<FileParseResult>();

            // First pass: parse all files, generate their syntax trees,
            // and figure out what variables they've declared
            var stringTableManager = new StringTableManager();
            //Godot.GD.Load<Godot.CSharpScript>("res://addons/YarnSpinner-Godot/Runtime/Yarn/YarnSpinner.Compiler/StringTableManager.cs").New() as Yarn.Compiler.StringTableManager;


            foreach (var file in compilationJob.Files)
            {
                var parseResult = ParseSyntaxTree(file, ref diagnostics);
                parsedFiles.Add(parseResult);

                // ok now we will add in our lastline tags
                // we do this BEFORE we build our strings table otherwise the tags will get missed
                // this should probably be a flag instead of every time though
                var lastLineTagger = new LastLineBeforeOptionsVisitor();
                lastLineTagger.Visit(parseResult.Tree);
                RegisterStrings(file.FileName, stringTableManager, parseResult.Tree, ref diagnostics);
            }

            // Ensure that all nodes names in this compilation are unique. Node
            // name uniqueness is important for several processes, so we do this
            // check here.
            AddErrorsForDuplicateNodeNames(parsedFiles, ref diagnostics);

            if (compilationJob.CompilationType == CompilationJob.Type.StringsOnly)
            {
                // Stop at this point
                return new CompilationResult
                {
                    Declarations = null,
                    ContainsImplicitStringTags = stringTableManager.ContainsImplicitStringTags,
                    Program = null,
                    StringTable = stringTableManager.StringTable,
                    Diagnostics = diagnostics,
                };
            }

            // Find the type definitions in these files.
            var walker = new ParseTreeWalker();
            foreach (var parsedFile in parsedFiles)
            {
                var typeDeclarationVisitor = new TypeDeclarationListener(parsedFile.Name, parsedFile.Tokens, parsedFile.Tree, ref typeDeclarations);

                walker.Walk(typeDeclarationVisitor, parsedFile.Tree);

                diagnostics.AddRange(typeDeclarationVisitor.Diagnostics);
            }

            var fileTags = new Dictionary<string, IEnumerable<string>>();

            // Find the variable declarations in these files.
            foreach (var parsedFile in parsedFiles)
            {
                GetDeclarations(parsedFile, knownVariableDeclarations, out var newDeclarations, typeDeclarations, out var newFileTags, out var declarationDiagnostics);

                knownVariableDeclarations.AddRange(newDeclarations);
                derivedVariableDeclarations.AddRange(newDeclarations);
                diagnostics.AddRange(declarationDiagnostics);

                fileTags.Add(parsedFile.Name, newFileTags);
            }

            List<DeferredTypeDiagnostic> potentialIssues = new List<DeferredTypeDiagnostic>();
            foreach (var parsedFile in parsedFiles)
            {
                var checker = new TypeCheckVisitor(parsedFile.Name, knownVariableDeclarations, typeDeclarations);

                checker.Visit(parsedFile.Tree);
                knownVariableDeclarations.AddRange(checker.NewDeclarations);
                derivedVariableDeclarations.AddRange(checker.NewDeclarations);
                diagnostics.AddRange(checker.Diagnostics);

                potentialIssues.AddRange(checker.deferredTypes);

#if VALIDATE_ALL_EXPRESSIONS
                // Validate that the type checker assigned a type to every
                // expression
                var allExpressions = FlattenParseTree(parsedFile.Tree).OfType<YarnSpinnerParser.ExpressionContext>();

                var expressionsWithNoType = allExpressions.Where(e => e.Type == BuiltinTypes.Undefined);

                if (expressionsWithNoType.Count() > 0)
                {
                    string report = string.Join(", ", expressionsWithNoType.Select(e => $"{e.GetTextWithWhitespace()} (line {e.Start.Line})"));

                    throw new InvalidOperationException($"Internal error: The following expressions were not assigned a type: {report}");
                }
#endif
            }

            // determining the nodes we need to track visits on
            // this needs to be done before we finish up with declarations
            // so that any tracking variables are included in the compiled declarations
            HashSet<string> trackingNodes = new HashSet<string>();
            HashSet<string> ignoringNodes = new HashSet<string>();
            foreach (var parsedFile in parsedFiles)
            {
                var thingy = new NodeTrackingVisitor(trackingNodes, ignoringNodes);
                thingy.Visit(parsedFile.Tree);
            }

            // removing all nodes we are told explicitly to not track
            trackingNodes.ExceptWith(ignoringNodes);

            var trackingDeclarations = new List<Declaration>();
            foreach (var node in trackingNodes)
            {
                trackingDeclarations.Add(Declaration.CreateVariable(Yarn.Library.GenerateUniqueVisitedVariableForNode(node), BuiltinTypes.Number, 0, $"The generated variable for tracking visits of node {node}"));
            }

            // adding the generated tracking variables into the declaration list
            // this way any future variable storage system will know about them
            // if we didn't do this later stages wouldn't be able to interface with them
            knownVariableDeclarations.AddRange(trackingDeclarations);
            derivedVariableDeclarations.AddRange(trackingDeclarations);

            var totalDeclarations = new List<Declaration>();
            totalDeclarations.AddRange(derivedVariableDeclarations);
            totalDeclarations.AddRange(knownVariableDeclarations);

            // ok here we need to run through any deferredTypes we have and see if they got resolved
            foreach (var hmm in potentialIssues)
            {
                var resolved = false;
                foreach (var dec in totalDeclarations)
                {
                    if (dec.Name == hmm.Name)
                    {
                        resolved = true;
                        break;
                    }
                }

                if (resolved)
                {
                    continue;
                }

                diagnostics.Add(hmm.diagnostic);
            }

            // TODO: I am pretty sure this is made redundant by the v3 type system, will need to check if it's still needed.
            // determining if there are any duplicate infered variables
            // at this point this shouldn't happen, but if it has we need to error out now
            var duplicateInferredVars = knownVariableDeclarations.Where(d => !(d.Type is FunctionType)).GroupBy(d => d.Name).Where(g => g.Count() > 1);
            foreach (var group in duplicateInferredVars)
            {
                var groupMessage = group.Select(d => $"\"{d.SourceFileName}\" on line {d.SourceFileLine}");
                var message = $"\"{group.Key}\" has had its default value inferred in multiple places: " + String.Join(", ", groupMessage);
                diagnostics.Add(new Diagnostic(message, Diagnostic.DiagnosticSeverity.Error));
            }
            // removing all the duplicate keys
            var duplicateKeys = duplicateInferredVars.Select(g => g.Key);
            knownVariableDeclarations.Where(d => duplicateKeys.Contains(d.Name));

            // adding in the warnings about empty nodes
            var empties = AddErrorsForEmptyNodes(parsedFiles, ref diagnostics);

            if (compilationJob.CompilationType == CompilationJob.Type.DeclarationsOnly)
            {
                // Stop at this point
                return new CompilationResult
                {
                    Declarations = derivedVariableDeclarations,
                    ContainsImplicitStringTags = false,
                    Program = null,
                    StringTable = null,
                    FileTags = fileTags,
                    Diagnostics = diagnostics,
                };
            }

            if (diagnostics.Any(d => d.Severity == Diagnostic.DiagnosticSeverity.Error))
            {
                // We have errors, so we can't safely generate code.
            }
            else
            {
                // No errors! Go ahead and generate the code for all parsed
                // files.
                foreach (var parsedFile in parsedFiles)
                {
                    CompilationResult compilationResult = GenerateCode(parsedFile, knownVariableDeclarations, compilationJob, stringTableManager, trackingNodes, empties);

                    results.Add(compilationResult);
                }
            }

            var finalResult = CompilationResult.CombineCompilationResults(results, stringTableManager);

            // Last step: take every variable declaration we found in all
            // of the inputs, and create an initial value registration for
            // it.
            foreach (var declaration in knownVariableDeclarations)
            {
                // We only care about variable declarations here
                if (declaration.Type is FunctionType)
                {
                    continue;
                }

                if (declaration.Type == BuiltinTypes.Undefined)
                {
                    // This declaration has an undefined type; we will
                    // already have created an error message for this, so
                    // skip this one.
                    continue;
                }

                Operand value;

                if (declaration.DefaultValue == null)
                {
                    diagnostics.Add(new Diagnostic($"Variable declaration {declaration.Name} (type {declaration.Type?.Name ?? "undefined"}) has a null default value. This is not allowed."));
                    continue;
                }

                if (declaration.Type == BuiltinTypes.String)
                {
                    value = new Operand(Convert.ToString(declaration.DefaultValue));
                }
                else if (declaration.Type == BuiltinTypes.Number)
                {
                    value = new Operand(Convert.ToSingle(declaration.DefaultValue));
                }
                else if (declaration.Type == BuiltinTypes.Boolean)
                {
                    value = new Operand(Convert.ToBoolean(declaration.DefaultValue));
                }
                else
                {
                    throw new ArgumentOutOfRangeException($"Cannot create an initial value for type {declaration.Type.Name}");
                }

                if (finalResult.Program != null)
                {
                    finalResult.Program.InitialValues.Add(declaration.Name, value);
                }
            }

            finalResult.Declarations = derivedVariableDeclarations;

            finalResult.FileTags = fileTags;

            finalResult.Diagnostics = finalResult.Diagnostics.Concat(diagnostics).Distinct();

            return finalResult;
        }

        /// <summary>
        /// Checks every node name in <paramref name="parseResults"/>, and
        /// ensure that they're all unique. If there are duplicates, create
        /// diagnostics where any node overlaps.
        /// </summary>
        /// <param name="parseResults">A collection of file parse results to
        /// check.</param>
        /// <param name="diagnostics">A collection of diagnostics to add
        /// to.</param>
        private static void AddErrorsForDuplicateNodeNames(List<FileParseResult> parseResults, ref List<Diagnostic> diagnostics)
        {
            var allNodes = parseResults.SelectMany(r =>
            {
                var dialogue = r.Tree.Payload as YarnSpinnerParser.DialogueContext;
                if (dialogue == null)
                {
                    return Enumerable.Empty<(YarnSpinnerParser.NodeContext Node, FileParseResult File)>();
                }

                return dialogue.node().Select(n => (Node: n, File: r));
            });

            // Pair up every node with its name, and filter out any that don't
            // have a name
            var nodesWithNames = allNodes.Select(n =>
            {
                var titleHeader = GetHeadersWithKey(n.Node, "title").FirstOrDefault();
                if (titleHeader == null)
                {
                    return (
                        Name: null,
                        Header: null,
                        Node: n.Node,
                        File: n.File);
                }
                else
                {
                    return (
                        Name: titleHeader.header_value.Text, 
                        Header: titleHeader,
                        Node: n.Node,
                        File: n.File);
                }
            }).Where(kv => kv.Name != null);

            var nodesByName = nodesWithNames.GroupBy(n => n.Name);

            // Find groups of nodes with the same name and generate diagnostics
            // for each
            foreach (var group in nodesByName)
            {
                if (group.Count() == 1)
                {
                    continue;
                }

                // More than one node has this name! Report an error on both.
                foreach (var entry in group)
                {
                    var d = new Diagnostic(entry.File.Name, entry.Header, $"More than one node is named {entry.Name}");
                    diagnostics.Add(d);
                }
            }
        }

        private static HashSet<string> AddErrorsForEmptyNodes(List<FileParseResult> parseResults, ref List<Diagnostic> diagnostics)
        {
            HashSet<string> emptyNodes = new HashSet<string>();
            var empties = parseResults.SelectMany(r =>
            {
                var dialogue = r.Tree.Payload as YarnSpinnerParser.DialogueContext;
                if (dialogue == null)
                {
                    return Enumerable.Empty<(YarnSpinnerParser.NodeContext Node, FileParseResult File)>();
                }

                return dialogue.node().Select(n => (Node: n, File: r));
            }).Where(n => n.Node.body() != null && n.Node.body().statement().Length == 0);

            foreach (var entry in empties)
            {
                var title = GetHeadersWithKey(entry.Node, "title").FirstOrDefault().header_value.Text;
                var d = new Diagnostic(entry.File.Name, entry.Node, $"Node \"{title}\" is empty and will not be included in the compiled output.", Diagnostic.DiagnosticSeverity.Warning);
                diagnostics.Add(d);
                emptyNodes.Add(title);
            }
            return emptyNodes;
        }

        private static void RegisterStrings(string fileName, StringTableManager stringTableManager, IParseTree tree, ref List<Diagnostic> diagnostics)
        {
            var visitor = new StringTableGeneratorVisitor(fileName, stringTableManager);
            visitor.Visit(tree);
            diagnostics.AddRange(visitor.Diagnostics);
        }

        private static void GetDeclarations(FileParseResult parsedFile, IEnumerable<Declaration> existingDeclarations, out IEnumerable<Declaration> newDeclarations, IEnumerable<IType> typeDeclarations, out IEnumerable<string> fileTags, out IEnumerable<Diagnostic> diagnostics)
        {
            var variableDeclarationVisitor = new DeclarationVisitor(parsedFile.Name, existingDeclarations, typeDeclarations, parsedFile.Tokens);

            var newDiagnosticList = new List<Diagnostic>();

            variableDeclarationVisitor.Visit(parsedFile.Tree);

            newDiagnosticList.AddRange(variableDeclarationVisitor.Diagnostics);

            // Upon exit, newDeclarations will now contain every variable
            // declaration we found
            newDeclarations = variableDeclarationVisitor.NewDeclarations;

            fileTags = variableDeclarationVisitor.FileTags;

            diagnostics = newDiagnosticList;
        }

        private static CompilationResult GenerateCode(FileParseResult fileParseResult, IEnumerable<Declaration> variableDeclarations, CompilationJob job, StringTableManager stringTableManager, HashSet<string> trackingNodes, HashSet<string> NodesToSkip = null)
        {
            Compiler compiler = new Compiler(fileParseResult);

            compiler.TrackingNodes = trackingNodes;
            compiler.Library = job.Library;
            compiler.VariableDeclarations = variableDeclarations;

            if (NodesToSkip == null)
            {
                compiler.SkipNodes = new HashSet<string>();    
            }
            else
            {
                compiler.SkipNodes = NodesToSkip;
            }

            compiler.Compile();

            var debugInfoDictionary = new Dictionary<string, DebugInfo>();

            // Don't attempt to generate debug information if compilation
            // produced errors
            if (!compiler.Diagnostics.Any(d => d.Severity == Diagnostic.DiagnosticSeverity.Error))
            {
                foreach (var debugInfo in compiler.DebugInfos)
                {
                    debugInfoDictionary.Add(debugInfo.NodeName, debugInfo);
                }
            }

            return new CompilationResult
            {
                Program = compiler.Program,
                DebugInfo = debugInfoDictionary,
                StringTable = stringTableManager.StringTable,
                ContainsImplicitStringTags = stringTableManager.ContainsImplicitStringTags,
                Diagnostics = compiler.Diagnostics,
            };
        }

        /// <summary>
        /// Returns a collection of <see cref="Declaration"/> structs that
        /// describe the functions present in <paramref name="library"/>.
        /// </summary>
        /// <param name="library">The <see cref="Library"/> to get declarations
        /// from.</param>
        /// <returns>The <see cref="Declaration"/> structs found.</returns>
        internal static (IEnumerable<Declaration>, IEnumerable<Diagnostic>) GetDeclarationsFromLibrary(Library library)
        {
            var declarations = new List<Declaration>();

            var diagnostics = new List<Diagnostic>();

            foreach (var function in library.Delegates)
            {
                var method = function.Value.Method;

                if (method.ReturnType == typeof(Value))
                {
                    // Functions that return the internal type Values are
                    // operators, and are type checked by
                    // ExpressionTypeVisitor. (Future work: define each
                    // polymorph of each operator as a separate function
                    // that returns a concrete type, rather than the
                    // current method of having a 'Value' wrapper type).
                    continue;
                }

                // Does the return type of this delegate map to a value
                // that Yarn Spinner can use?
                if (BuiltinTypes.TypeMappings.TryGetValue(method.ReturnType, out var yarnReturnType) == false)
                {
                    diagnostics.Add(new Diagnostic($"Function {function.Key} cannot be used in Yarn Spinner scripts: {method.ReturnType} is not a valid return type."));
                    continue;
                }

                // Define a new type for this function
                FunctionType functionType = new FunctionType();

                var includeMethod = true;

                foreach (var paramInfo in method.GetParameters())
                {
                    if (paramInfo.ParameterType == typeof(Value))
                    {
                        // Don't type-check this method - it's an operator
                        includeMethod = false;
                        break;
                    }

                    if (paramInfo.IsOptional)
                    {
                        diagnostics.Add(new Diagnostic($"Function {function.Key} cannot be used in Yarn Spinner scripts: parameter {paramInfo.Name} is optional, which isn't supported."));
                        continue;
                    }

                    if (paramInfo.IsOut)
                    {
                        diagnostics.Add(new Diagnostic($"Function {function.Key} cannot be used in Yarn Spinner scripts: parameter {paramInfo.Name} is an out parameter, which isn't supported."));
                        continue;
                    }

                    if (BuiltinTypes.TypeMappings.TryGetValue(paramInfo.ParameterType, out var yarnParameterType) == false)
                    {
                        diagnostics.Add(new Diagnostic($"Function {function.Key} cannot be used in Yarn Spinner scripts: parameter {paramInfo.Name}'s type ({paramInfo.ParameterType}) cannot be used in Yarn functions"));
                        continue;
                    }

                    functionType.AddParameter(yarnParameterType);
                }

                if (includeMethod == false)
                {
                    continue;
                }

                functionType.ReturnType = yarnReturnType;

                var declaration = new Declaration
                {
                    Name = function.Key,
                    Type = functionType,
                    Range = { },
                    SourceFileName = Declaration.ExternalDeclaration,
                    SourceNodeName = null,
                };

                declarations.Add(declaration);
            }

            return (declarations, diagnostics);
        }

        private static FileParseResult ParseSyntaxTree(CompilationJob.File file, ref List<Diagnostic> diagnostics)
        {
            string source = file.Source;
            string fileName = file.FileName;

            return ParseSyntaxTree(fileName, source, ref diagnostics);
        }

        internal static FileParseResult ParseSyntaxTree(string fileName, string source, ref List<Diagnostic> diagnostics)
        {
            ICharStream input = CharStreams.fromstring(source);

            YarnSpinnerLexer lexer = new YarnSpinnerLexer(input);
            CommonTokenStream tokens = new CommonTokenStream(lexer);

            YarnSpinnerParser parser = new YarnSpinnerParser(tokens);

            // turning off the normal error listener and using ours
            var parserErrorListener = new ParserErrorListener(fileName);
            var lexerErrorListener = new LexerErrorListener(fileName);

            parser.ErrorHandler = new ErrorStrategy();

            parser.RemoveErrorListeners();
            parser.AddErrorListener(parserErrorListener);

            lexer.RemoveErrorListeners();
            lexer.AddErrorListener(lexerErrorListener);

            IParseTree tree;

            tree = parser.dialogue();

            var newDiagnostics = lexerErrorListener.Diagnostics.Concat(parserErrorListener.Diagnostics);

            diagnostics.AddRange(newDiagnostics);

            return new FileParseResult(fileName, tree, tokens);
        }

        /// <summary>
        /// Reads the contents of a text file containing source code, and
        /// returns a list of tokens found in that source code.
        /// </summary>
        /// <param name="path">The path of the file to load the source code
        /// from.</param>
        /// <inheritdoc cref="GetTokensFromString(string)" path="/returns"/>
        internal static List<string> GetTokensFromFile(string path)
        {
            var text = File.ReadAllText(path);
            return GetTokensFromString(text);
        }

        /// <summary>
        /// Reads a string containing source code, and returns a list of
        /// tokens found in that source code.
        /// </summary>
        /// <param name="text">The source code to extract tokens
        /// from.</param>
        /// <returns>The list of tokens extracted from the source
        /// code.</returns>
        internal static List<string> GetTokensFromString(string text)
        {
            ICharStream input = CharStreams.fromstring(text);

            YarnSpinnerLexer lexer = new YarnSpinnerLexer(input);

            var tokenStringList = new List<string>();

            var tokens = lexer.GetAllTokens();
            foreach (var token in tokens)
            {
                tokenStringList.Add($"{token.Line}:{token.Column} {YarnSpinnerLexer.DefaultVocabulary.GetDisplayName(token.Type)} \"{token.Text}\"");
            }

            return tokenStringList;
        }

        /// <summary>
        /// Finds all header parse contexts in the given node with the given key.
        /// </summary>
        /// <param name="nodeContext">The node context to search.</param>
        /// <param name="name">The key to search for</param>
        /// <returns>A collection of header contexts.</returns>
        internal static IEnumerable<YarnSpinnerParser.HeaderContext> GetHeadersWithKey(YarnSpinnerParser.NodeContext nodeContext, string name)
        {
            return nodeContext.header().Where(h => h.header_key?.Text == name);
        }

        /// <summary>
        /// Generates a unique label name to use in the program.
        /// </summary>
        /// <param name="commentary">Any additional text to append to the
        /// end of the label.</param>
        /// <returns>The new label name.</returns>
        internal string RegisterLabel(string commentary = null)
        {
            return "L" + this.labelCount++ + commentary;
        }

        /// <summary>
        /// Creates a new instruction, and appends it to a node in the <see
        /// cref="Program" />.
        /// </summary>
        /// <param name="node">The node to append instructions to.</param>
        /// <param name="debugInfo">The <see cref="DebugInfo"/> object to add
        /// line debugging information to.</param>
        /// <param name="sourceLine">The zero-indexed line in the source input
        /// corresponding to this instruction.</param>
        /// <param name="sourceCharacter">The zero-indexed character in the
        /// source input corresponding to this instruction.</param>
        /// <param name="code">The opcode of the instruction.</param>
        /// <param name="operands">The operands to associate with the
        /// instruction.</param>
        void Emit(Node node, DebugInfo debugInfo, int sourceLine, int sourceCharacter, OpCode code, params Operand[] operands)
        {
            var instruction = new Instruction
            {
                Opcode = code,
            };

            instruction.Operands.Add(operands);

            debugInfo.LineInfos.Add(node.Instructions.Count, (sourceLine, sourceCharacter));

            node.Instructions.Add(instruction);
        }

        /// <summary>
        /// Creates a new instruction, and appends it to the current node in the
        /// <see cref="Program"/>.
        /// </summary>
        /// <remarks>
        /// Called by instances of <see
        /// cref="CodeGenerationVisitor"/> while walking the parse tree.
        /// </remarks>
        /// <param name="code">The opcode of the instruction.</param>
        /// <param name="startToken">The first token in the expression or
        /// statement that was responsible for emitting this
        /// instruction.</param>
        /// <param name="operands">The operands to associate with the
        /// instruction.</param>
        internal void Emit(OpCode code, IToken startToken, params Operand[] operands)
        {
            this.Emit(this.CurrentNode, this.CurrentDebugInfo, startToken?.Line - 1 ?? -1, startToken?.Column ?? -1, code, operands);
        }

        /// <summary>
        /// Creates a new instruction, and appends it to the current node in the
        /// <see cref="Program"/>.
        /// Differs from the other Emit call by not requiring a start token.
        /// This enables its use in pure synthesised elements of the Yarn.
        /// </summary>
        /// <remarks>
        /// Called by instances of <see
        /// cref="CodeGenerationVisitor"/> while walking the parse tree.
        /// </remarks>
        /// <param name="code">The opcode of the instruction.</param>
        /// <param name="operands">The operands to associate with the
        /// instruction.</param>
        internal void Emit(OpCode code, params Operand[] operands)
        {
            this.Emit(this.CurrentNode, this.CurrentDebugInfo, -1, -1, code, operands);
        }

        /// <summary>
        /// Extracts a line ID from a collection of <see
        /// cref="YarnSpinnerParser.HashtagContext"/>s, if one exists.
        /// </summary>
        /// <param name="hashtagContexts">The hashtag parsing
        /// contexts.</param>
        /// <returns>The line ID if one is present in the hashtag contexts,
        /// otherwise <c>null</c>.</returns>
        internal static YarnSpinnerParser.HashtagContext GetLineIDTag(YarnSpinnerParser.HashtagContext[] hashtagContexts)
        {
            // if there are any hashtags
            if (hashtagContexts != null)
            {
                foreach (var hashtagContext in hashtagContexts)
                {
                    string tagText = hashtagContext.text.Text;
                    if (tagText.StartsWith("line:", StringComparison.InvariantCulture))
                    {
                        return hashtagContext;
                    }
                }
            }

            return null;
        }

        // this replaces the CompileNode from the old compiler will start
        // walking the parse tree emitting byte code as it goes along this
        // will all get stored into our program var needs a tree to walk,
        // this comes from the ANTLR Parser/Lexer steps
        internal void Compile()
        {
            ParseTreeWalker walker = new ParseTreeWalker();
            walker.Walk(this, this.fileParseResult.Tree);
        }
        
        /// <summary>
        /// we have found a new node set up the currentNode var ready to
        /// hold it and otherwise continue
        /// </summary>
        /// <inheritdoc/>
        public override void EnterNode(YarnSpinnerParser.NodeContext context)
        {
            this.CurrentNode = new Node();
            this.CurrentDebugInfo = new DebugInfo();
            this.RawTextNode = false;
        }

        /// <summary>
        /// have left the current node store it into the program wipe the
        /// var and make it ready to go again
        /// </summary>
        /// <inheritdoc />
        public override void ExitNode(YarnSpinnerParser.NodeContext context)
        {
            if (string.IsNullOrEmpty(this.CurrentNode.Name))
            {
                // We don't have a name for this node. We can't emit code for
                // it.
                this.diagnostics.Add(new Diagnostic(
                    this.fileParseResult.Name,
                    context,
                    "Missing title header for node"));
            }
            else
            {
                // we haven't been asked to skip over this node for some reason
                // so we will write the code to the program
                if (!this.SkipNodes.Contains(this.CurrentNode.Name))
                {
                    if (!this.Program.Nodes.ContainsKey(this.CurrentNode.Name))
                    {
                        this.Program.Nodes[this.CurrentNode.Name] = this.CurrentNode;
                    }
                    // Duplicate node name! We'll have caught this during the
                    // declarations pass, so no need to issue an error here.

                    this.CurrentDebugInfo.NodeName = this.CurrentNode.Name;
                    this.CurrentDebugInfo.FileName = this.fileParseResult.Name;

                    this.DebugInfos.Add(this.CurrentDebugInfo);
                }
            }

            this.CurrentNode = null;
            this.RawTextNode = false;
        }

        /// <summary> 
        /// have finished with the header so about to enter the node body
        /// and all its statements do the initial setup required before
        /// compiling that body statements eg emit a new startlabel
        /// </summary>
        /// <inheritdoc />
        public override void ExitHeader(YarnSpinnerParser.HeaderContext context)
        {
            var headerKey = context.header_key.Text;

            // Use the header value if provided, else fall back to the
            // empty string. This means that a header like "foo: \n" will
            // be stored as 'foo', '', consistent with how it was typed.
            // That is, it's not null, because a header was provided, but
            // it was written as an empty line.
            var headerValue = context.header_value?.Text ?? String.Empty;

            if (headerKey.Equals("title", StringComparison.InvariantCulture))
            {
                // Set the name of the node
                this.CurrentNode.Name = headerValue;
            }

            if (headerKey.Equals("tags", StringComparison.InvariantCulture))
            {
                // Split the list of tags by spaces, and use that
                var tags = headerValue.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

                this.CurrentNode.Tags.Add(tags);

                if (this.CurrentNode.Tags.Contains("rawText"))
                {
                    // This is a raw text node. Flag it as such for future
                    // compilation.
                    this.RawTextNode = true;
                }
            }

            var header = new Header();
            header.Key = headerKey;
            header.Value = headerValue;
            this.CurrentNode.Headers.Add(header);
        }

        /// <summary>
        /// have entered the body the header should have finished being
        /// parsed and currentNode ready all we do is set up a body visitor
        /// and tell it to run through all the statements it handles
        /// everything from that point onwards
        /// </summary>
        /// <inheritdoc />
        public override void EnterBody(YarnSpinnerParser.BodyContext context)
        {
            // ok so something in here needs to be a bit different
            // also need to emit tracking code here for when we fall out of a node that needs tracking?
            // or should do I do in inside the codegenvisitor?

            // if it is a regular node
            if (!this.RawTextNode)
            {
                // This is the start of a node that we can jump to. Add a
                // label at this point.
                this.CurrentNode.Labels.Add(this.RegisterLabel(), this.CurrentNode.Instructions.Count);

                string track = TrackingNodes.Contains(CurrentNode.Name) ? Yarn.Library.GenerateUniqueVisitedVariableForNode(CurrentNode.Name) : null;

                CodeGenerationVisitor visitor = new CodeGenerationVisitor(this, track);

                foreach (var statement in context.statement())
                {
                    visitor.Visit(statement);
                }
            }

            // We are a rawText node. Don't compile it; instead, note the
            // string
            else
            {
                this.CurrentNode.SourceTextStringID = Compiler.GetLineIDForNodeName(this.CurrentNode.Name);
            }
        }

        /// <summary>
        /// Generates a line id for a raw text node
        /// </summary>
        /// <remarks>
        /// This should only be used when in raw text mode.
        /// </remarks>
        /// <param name="name">The name of the node</param>
        /// <returns>line id for the raw text node</returns>
        public static string GetLineIDForNodeName(string name)
        {
            return "line:" + name;
        }

        /// <summary>
        /// Cleans up any remaining node tracking values and emits necessary instructions to support visitation and close off the node
        /// </summary>
        /// <inheritdoc />
        public override void ExitBody(YarnSpinnerParser.BodyContext context)
        {
            // this gives us the final increment at the end of the node
            // this is for when we visit and complete a node without a jump
            // theoretically this does mean that there might be redundant increments
            // but I don't think it will matter because a jump always prevents
            // the extra increment being reached
            // a bit inelegant to do it this way but the codegen visitor doesn't exit a node
            // will do for now, shouldn't be hard to refactor this later
            string track = TrackingNodes.Contains(CurrentNode.Name) ? Yarn.Library.GenerateUniqueVisitedVariableForNode(CurrentNode.Name) : null;
            if (track != null)
            {
                CodeGenerationVisitor.GenerateTrackingCode(this, track);
            }

            // We have exited the body; emit a 'stop' opcode here.
            this.Emit(this.CurrentNode, this.CurrentDebugInfo, context.Stop.Line - 1, 0, OpCode.Stop);
        }

        /// <summary>
        /// Flattens a tree of <see cref="IParseTree"/> objects by
        /// recursively visiting their children, and converting them into a
        /// flat <see cref="IEnumerable{IParseTree}"/>.
        /// </summary>
        /// <param name="node">The root node to begin work from.</param>
        /// <returns>An <see cref="IEnumerable{T}"/> that contains a
        /// flattened version of the hierarchy rooted at <paramref
        /// name="node"/>.</returns>
        public static IEnumerable<IParseTree> FlattenParseTree(IParseTree node)
        {
            // Get the list of children in this node
            var children = Enumerable
                .Range(0, node.ChildCount)
                .Select(i => node.GetChild(i));

            // Recursively visit each child and append it to a sequence,
            // and then return that sequence
            return children
                .SelectMany(c => FlattenParseTree(c))
                .Concat(new[] { node });
        }

        /// <summary>
        /// Gets the text of the documentation comments that either immediately
        /// precede <paramref name="context"/>, or are on the same line as
        /// <paramref name="context"/>.
        /// </summary>
        /// <remarks>
        /// Documentation comments begin with a triple-slash (<c>///</c>), and
        /// are used to describe variable declarations. If documentation
        /// comments precede a declaration (that is, they're not on the same
        /// line as the declaration), then they may span multiple lines, as long
        /// as each line begins with a triple-slash.
        /// </remarks>
        /// <param name="tokens">The token stream to search.</param>
        /// <param name="context">The parser rule context to get documentation
        /// comments for.</param>
        /// <param name="allowCommentsAfter">If true, this method will search
        /// for documentation comments that come after <paramref
        /// name="context"/>'s last token and are on the same line.</param>
        /// <returns>The text of the documentation comments.</returns>
        public static string GetDocumentComments(CommonTokenStream tokens, ParserRuleContext context, bool allowCommentsAfter = true)
        {
            string description = null;

            var precedingComments = tokens.GetHiddenTokensToLeft(context.Start.TokenIndex, YarnSpinnerLexer.COMMENTS);

            if (precedingComments != null)
            {
                var precedingDocComments = precedingComments
                    // There are no tokens on the main channel with this
                    // one on the same line
                    .Where(t => tokens.GetTokens()
                        .Where(ot => ot.Line == t.Line)
                        .Where(ot => ot.Type != YarnSpinnerLexer.INDENT && ot.Type != YarnSpinnerLexer.DEDENT)
                        .Where(ot => ot.Channel == YarnSpinnerLexer.DefaultTokenChannel)
                        .Count() == 0)
                    // The comment starts with a triple-slash
                    .Where(t => t.Text.StartsWith("///"))
                    // Get its text
                    .Select(t => t.Text.Replace("///", string.Empty).Trim());

                if (precedingDocComments.Count() > 0)
                {
                    description = string.Join(" ", precedingDocComments);
                }
            }

            if (allowCommentsAfter)
            {
                var subsequentComments = tokens.GetHiddenTokensToRight(context.Stop.TokenIndex, YarnSpinnerLexer.COMMENTS);
                if (subsequentComments != null)
                {
                    var subsequentDocComment = subsequentComments
                        // This comment is on the same line as the end of
                        // the declaration
                        .Where(t => t.Line == context.Stop.Line)
                        // The comment starts with a triple-slash
                        .Where(t => t.Text.StartsWith("///"))
                        // Get its text
                        .Select(t => t.Text.Replace("///", string.Empty).Trim())
                        // Get the first one, or null
                        .FirstOrDefault();

                    if (subsequentDocComment != null)
                    {
                        description = subsequentDocComment;
                    }
                }
            }

            return description;
        }
    }
}
