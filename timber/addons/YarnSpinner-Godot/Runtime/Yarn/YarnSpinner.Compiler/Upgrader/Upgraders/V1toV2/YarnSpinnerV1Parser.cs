//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/desplesda/Work/yarnspinner/YarnSpinner.Compiler/Upgrader/Upgraders/V1toV2/YarnSpinnerV1Parser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Yarn.Compiler {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class YarnSpinnerV1Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, WS=3, NEWLINE=4, ID=5, BODY_START=6, HEADER_DELIMITER=7, 
		HASHTAG=8, REST_OF_LINE=9, HEADER_NEWLINE=10, COMMENT=11, BODY_WS=12, 
		BODY_NEWLINE=13, BODY_COMMENT=14, BODY_END=15, SHORTCUT_ARROW=16, COMMAND_START=17, 
		OPTION_START=18, FORMAT_FUNCTION_START=19, BODY_HASHTAG=20, TEXT_NEWLINE=21, 
		TEXT_HASHTAG=22, TEXT_EXPRESSION_START=23, TEXT_COMMAND_START=24, TEXT_FORMAT_FUNCTION_START=25, 
		TEXT_COMMENT=26, TEXT=27, TEXT_FRAG=28, TEXT_COMMANDHASHTAG_WS=29, TEXT_COMMANDHASHTAG_COMMENT=30, 
		TEXT_COMMANDHASHTAG_COMMAND_START=31, TEXT_COMMANDHASHTAG_HASHTAG=32, 
		TEXT_COMMANDHASHTAG_NEWLINE=33, TEXT_COMMANDHASHTAG_ERROR=34, HASHTAG_WS=35, 
		HASHTAG_TAG=36, HASHTAG_TEXT=37, FORMAT_FUNCTION_WS=38, FORMAT_FUNCTION_ID=39, 
		FORMAT_FUNCTION_NUMBER=40, FORMAT_FUNCTION_EXPRESSION_START=41, FORMAT_FUNCTION_EQUALS=42, 
		FORMAT_FUNCTION_STRING=43, FORMAT_FUNCTION_END=44, EXPR_WS=45, KEYWORD_TRUE=46, 
		KEYWORD_FALSE=47, KEYWORD_NULL=48, OPERATOR_ASSIGNMENT=49, OPERATOR_LOGICAL_LESS_THAN_EQUALS=50, 
		OPERATOR_LOGICAL_GREATER_THAN_EQUALS=51, OPERATOR_LOGICAL_EQUALS=52, OPERATOR_LOGICAL_LESS=53, 
		OPERATOR_LOGICAL_GREATER=54, OPERATOR_LOGICAL_NOT_EQUALS=55, OPERATOR_LOGICAL_AND=56, 
		OPERATOR_LOGICAL_OR=57, OPERATOR_LOGICAL_XOR=58, OPERATOR_LOGICAL_NOT=59, 
		OPERATOR_MATHS_ADDITION_EQUALS=60, OPERATOR_MATHS_SUBTRACTION_EQUALS=61, 
		OPERATOR_MATHS_MULTIPLICATION_EQUALS=62, OPERATOR_MATHS_MODULUS_EQUALS=63, 
		OPERATOR_MATHS_DIVISION_EQUALS=64, OPERATOR_MATHS_ADDITION=65, OPERATOR_MATHS_SUBTRACTION=66, 
		OPERATOR_MATHS_MULTIPLICATION=67, OPERATOR_MATHS_DIVISION=68, OPERATOR_MATHS_MODULUS=69, 
		LPAREN=70, RPAREN=71, COMMA=72, STRING=73, FUNC_ID=74, EXPRESSION_END=75, 
		EXPRESSION_COMMAND_END=76, VAR_ID=77, NUMBER=78, COMMAND_WS=79, COMMAND_IF=80, 
		COMMAND_ELSEIF=81, COMMAND_ELSE=82, COMMAND_SET=83, COMMAND_ENDIF=84, 
		COMMAND_CALL=85, COMMAND_END=86, COMMAND_TEXT_END=87, COMMAND_EXPRESSION_START=88, 
		COMMAND_TEXT=89, OPTION_NEWLINE=90, OPTION_WS=91, OPTION_END=92, OPTION_DELIMIT=93, 
		OPTION_EXPRESSION_START=94, OPTION_FORMAT_FUNCTION_START=95, OPTION_TEXT=96, 
		OPTION_ID_WS=97, OPTION_ID=98;
	public const int
		RULE_dialogue = 0, RULE_file_hashtag = 1, RULE_node = 2, RULE_header = 3, 
		RULE_body = 4, RULE_statement = 5, RULE_line_statement = 6, RULE_line_formatted_text = 7, 
		RULE_format_function = 8, RULE_key_value_pair = 9, RULE_hashtag = 10, 
		RULE_line_condition = 11, RULE_expression = 12, RULE_value = 13, RULE_variable = 14, 
		RULE_function = 15, RULE_if_statement = 16, RULE_if_clause = 17, RULE_else_if_clause = 18, 
		RULE_else_clause = 19, RULE_set_statement = 20, RULE_call_statement = 21, 
		RULE_command_statement = 22, RULE_command_formatted_text = 23, RULE_shortcut_option_statement = 24, 
		RULE_shortcut_option = 25, RULE_option_statement = 26, RULE_option_formatted_text = 27;
	public static readonly string[] ruleNames = {
		"dialogue", "file_hashtag", "node", "header", "body", "statement", "line_statement", 
		"line_formatted_text", "format_function", "key_value_pair", "hashtag", 
		"line_condition", "expression", "value", "variable", "function", "if_statement", 
		"if_clause", "else_if_clause", "else_clause", "set_statement", "call_statement", 
		"command_statement", "command_formatted_text", "shortcut_option_statement", 
		"shortcut_option", "option_statement", "option_formatted_text"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'---'", null, null, null, null, null, 
		null, null, null, "'==='", "'->'", null, "'[['", null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "'='", null, "']'", null, "'true'", 
		"'false'", "'null'", null, null, null, null, null, null, null, null, null, 
		null, null, "'+='", "'-='", "'*='", "'%='", "'/='", "'+'", "'-'", "'*'", 
		"'/'", "'%'", "'('", "')'", "','", null, null, "'}'", null, null, null, 
		null, null, null, null, null, "'endif'", null, null, null, null, null, 
		null, null, "']]'", "'|'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "WS", "NEWLINE", "ID", "BODY_START", "HEADER_DELIMITER", 
		"HASHTAG", "REST_OF_LINE", "HEADER_NEWLINE", "COMMENT", "BODY_WS", "BODY_NEWLINE", 
		"BODY_COMMENT", "BODY_END", "SHORTCUT_ARROW", "COMMAND_START", "OPTION_START", 
		"FORMAT_FUNCTION_START", "BODY_HASHTAG", "TEXT_NEWLINE", "TEXT_HASHTAG", 
		"TEXT_EXPRESSION_START", "TEXT_COMMAND_START", "TEXT_FORMAT_FUNCTION_START", 
		"TEXT_COMMENT", "TEXT", "TEXT_FRAG", "TEXT_COMMANDHASHTAG_WS", "TEXT_COMMANDHASHTAG_COMMENT", 
		"TEXT_COMMANDHASHTAG_COMMAND_START", "TEXT_COMMANDHASHTAG_HASHTAG", "TEXT_COMMANDHASHTAG_NEWLINE", 
		"TEXT_COMMANDHASHTAG_ERROR", "HASHTAG_WS", "HASHTAG_TAG", "HASHTAG_TEXT", 
		"FORMAT_FUNCTION_WS", "FORMAT_FUNCTION_ID", "FORMAT_FUNCTION_NUMBER", 
		"FORMAT_FUNCTION_EXPRESSION_START", "FORMAT_FUNCTION_EQUALS", "FORMAT_FUNCTION_STRING", 
		"FORMAT_FUNCTION_END", "EXPR_WS", "KEYWORD_TRUE", "KEYWORD_FALSE", "KEYWORD_NULL", 
		"OPERATOR_ASSIGNMENT", "OPERATOR_LOGICAL_LESS_THAN_EQUALS", "OPERATOR_LOGICAL_GREATER_THAN_EQUALS", 
		"OPERATOR_LOGICAL_EQUALS", "OPERATOR_LOGICAL_LESS", "OPERATOR_LOGICAL_GREATER", 
		"OPERATOR_LOGICAL_NOT_EQUALS", "OPERATOR_LOGICAL_AND", "OPERATOR_LOGICAL_OR", 
		"OPERATOR_LOGICAL_XOR", "OPERATOR_LOGICAL_NOT", "OPERATOR_MATHS_ADDITION_EQUALS", 
		"OPERATOR_MATHS_SUBTRACTION_EQUALS", "OPERATOR_MATHS_MULTIPLICATION_EQUALS", 
		"OPERATOR_MATHS_MODULUS_EQUALS", "OPERATOR_MATHS_DIVISION_EQUALS", "OPERATOR_MATHS_ADDITION", 
		"OPERATOR_MATHS_SUBTRACTION", "OPERATOR_MATHS_MULTIPLICATION", "OPERATOR_MATHS_DIVISION", 
		"OPERATOR_MATHS_MODULUS", "LPAREN", "RPAREN", "COMMA", "STRING", "FUNC_ID", 
		"EXPRESSION_END", "EXPRESSION_COMMAND_END", "VAR_ID", "NUMBER", "COMMAND_WS", 
		"COMMAND_IF", "COMMAND_ELSEIF", "COMMAND_ELSE", "COMMAND_SET", "COMMAND_ENDIF", 
		"COMMAND_CALL", "COMMAND_END", "COMMAND_TEXT_END", "COMMAND_EXPRESSION_START", 
		"COMMAND_TEXT", "OPTION_NEWLINE", "OPTION_WS", "OPTION_END", "OPTION_DELIMIT", 
		"OPTION_EXPRESSION_START", "OPTION_FORMAT_FUNCTION_START", "OPTION_TEXT", 
		"OPTION_ID_WS", "OPTION_ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "YarnSpinnerV1Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static YarnSpinnerV1Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public YarnSpinnerV1Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public YarnSpinnerV1Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DialogueContext : ParserRuleContext {
		public NodeContext[] node() {
			return GetRuleContexts<NodeContext>();
		}
		public NodeContext node(int i) {
			return GetRuleContext<NodeContext>(i);
		}
		public File_hashtagContext[] file_hashtag() {
			return GetRuleContexts<File_hashtagContext>();
		}
		public File_hashtagContext file_hashtag(int i) {
			return GetRuleContext<File_hashtagContext>(i);
		}
		public DialogueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dialogue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterDialogue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitDialogue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDialogue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DialogueContext dialogue() {
		DialogueContext _localctx = new DialogueContext(Context, State);
		EnterRule(_localctx, 0, RULE_dialogue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASHTAG) {
				{
				{
				State = 56; file_hashtag();
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 62; node();
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_hashtagContext : ParserRuleContext {
		public ITerminalNode HASHTAG() { return GetToken(YarnSpinnerV1Parser.HASHTAG, 0); }
		public ITerminalNode HASHTAG_TEXT() { return GetToken(YarnSpinnerV1Parser.HASHTAG_TEXT, 0); }
		public ITerminalNode TEXT_COMMANDHASHTAG_NEWLINE() { return GetToken(YarnSpinnerV1Parser.TEXT_COMMANDHASHTAG_NEWLINE, 0); }
		public File_hashtagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_hashtag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterFile_hashtag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitFile_hashtag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_hashtag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_hashtagContext file_hashtag() {
		File_hashtagContext _localctx = new File_hashtagContext(Context, State);
		EnterRule(_localctx, 2, RULE_file_hashtag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; Match(HASHTAG);
			State = 68; Match(HASHTAG_TEXT);
			State = 69; Match(TEXT_COMMANDHASHTAG_NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeContext : ParserRuleContext {
		public ITerminalNode BODY_START() { return GetToken(YarnSpinnerV1Parser.BODY_START, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode BODY_END() { return GetToken(YarnSpinnerV1Parser.BODY_END, 0); }
		public HeaderContext[] header() {
			return GetRuleContexts<HeaderContext>();
		}
		public HeaderContext header(int i) {
			return GetRuleContext<HeaderContext>(i);
		}
		public NodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_node; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitNode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodeContext node() {
		NodeContext _localctx = new NodeContext(Context, State);
		EnterRule(_localctx, 4, RULE_node);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 71; header();
				}
				}
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			State = 76; Match(BODY_START);
			State = 77; body();
			State = 78; Match(BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeaderContext : ParserRuleContext {
		public IToken header_key;
		public IToken header_value;
		public ITerminalNode HEADER_DELIMITER() { return GetToken(YarnSpinnerV1Parser.HEADER_DELIMITER, 0); }
		public ITerminalNode HEADER_NEWLINE() { return GetToken(YarnSpinnerV1Parser.HEADER_NEWLINE, 0); }
		public ITerminalNode ID() { return GetToken(YarnSpinnerV1Parser.ID, 0); }
		public ITerminalNode REST_OF_LINE() { return GetToken(YarnSpinnerV1Parser.REST_OF_LINE, 0); }
		public HeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeaderContext header() {
		HeaderContext _localctx = new HeaderContext(Context, State);
		EnterRule(_localctx, 6, RULE_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; _localctx.header_key = Match(ID);
			State = 81; Match(HEADER_DELIMITER);
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REST_OF_LINE) {
				{
				State = 82; _localctx.header_value = Match(REST_OF_LINE);
				}
			}

			State = 85; Match(HEADER_NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INDENT) | (1L << HASHTAG) | (1L << SHORTCUT_ARROW) | (1L << COMMAND_START) | (1L << OPTION_START) | (1L << FORMAT_FUNCTION_START) | (1L << BODY_HASHTAG) | (1L << TEXT_NEWLINE) | (1L << TEXT_HASHTAG) | (1L << TEXT_EXPRESSION_START) | (1L << TEXT_COMMAND_START) | (1L << TEXT_FORMAT_FUNCTION_START) | (1L << TEXT) | (1L << TEXT_COMMANDHASHTAG_COMMAND_START) | (1L << TEXT_COMMANDHASHTAG_HASHTAG) | (1L << TEXT_COMMANDHASHTAG_NEWLINE) | (1L << HASHTAG_TAG))) != 0)) {
				{
				{
				State = 87; statement();
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Line_statementContext line_statement() {
			return GetRuleContext<Line_statementContext>(0);
		}
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public Set_statementContext set_statement() {
			return GetRuleContext<Set_statementContext>(0);
		}
		public Option_statementContext option_statement() {
			return GetRuleContext<Option_statementContext>(0);
		}
		public Shortcut_option_statementContext shortcut_option_statement() {
			return GetRuleContext<Shortcut_option_statementContext>(0);
		}
		public Call_statementContext call_statement() {
			return GetRuleContext<Call_statementContext>(0);
		}
		public Command_statementContext command_statement() {
			return GetRuleContext<Command_statementContext>(0);
		}
		public ITerminalNode INDENT() { return GetToken(YarnSpinnerV1Parser.INDENT, 0); }
		public ITerminalNode DEDENT() { return GetToken(YarnSpinnerV1Parser.DEDENT, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_statement);
		int _la;
		try {
			State = 108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 93; line_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94; if_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 95; set_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 96; option_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 97; shortcut_option_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 98; call_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 99; command_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 100; Match(INDENT);
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INDENT) | (1L << HASHTAG) | (1L << SHORTCUT_ARROW) | (1L << COMMAND_START) | (1L << OPTION_START) | (1L << FORMAT_FUNCTION_START) | (1L << BODY_HASHTAG) | (1L << TEXT_NEWLINE) | (1L << TEXT_HASHTAG) | (1L << TEXT_EXPRESSION_START) | (1L << TEXT_COMMAND_START) | (1L << TEXT_FORMAT_FUNCTION_START) | (1L << TEXT) | (1L << TEXT_COMMANDHASHTAG_COMMAND_START) | (1L << TEXT_COMMANDHASHTAG_HASHTAG) | (1L << TEXT_COMMANDHASHTAG_NEWLINE) | (1L << HASHTAG_TAG))) != 0)) {
					{
					{
					State = 101; statement();
					}
					}
					State = 106;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 107; Match(DEDENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_statementContext : ParserRuleContext {
		public Line_formatted_textContext line_formatted_text() {
			return GetRuleContext<Line_formatted_textContext>(0);
		}
		public ITerminalNode TEXT_NEWLINE() { return GetToken(YarnSpinnerV1Parser.TEXT_NEWLINE, 0); }
		public ITerminalNode TEXT_COMMANDHASHTAG_NEWLINE() { return GetToken(YarnSpinnerV1Parser.TEXT_COMMANDHASHTAG_NEWLINE, 0); }
		public Line_conditionContext line_condition() {
			return GetRuleContext<Line_conditionContext>(0);
		}
		public HashtagContext[] hashtag() {
			return GetRuleContexts<HashtagContext>();
		}
		public HashtagContext hashtag(int i) {
			return GetRuleContext<HashtagContext>(i);
		}
		public Line_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterLine_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitLine_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_statementContext line_statement() {
		Line_statementContext _localctx = new Line_statementContext(Context, State);
		EnterRule(_localctx, 12, RULE_line_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; line_formatted_text();
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEXT_COMMAND_START || _la==TEXT_COMMANDHASHTAG_COMMAND_START) {
				{
				State = 111; line_condition();
				}
			}

			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HASHTAG) | (1L << BODY_HASHTAG) | (1L << TEXT_HASHTAG) | (1L << TEXT_COMMANDHASHTAG_HASHTAG) | (1L << HASHTAG_TAG))) != 0)) {
				{
				{
				State = 114; hashtag();
				}
				}
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 120;
			_la = TokenStream.LA(1);
			if ( !(_la==TEXT_NEWLINE || _la==TEXT_COMMANDHASHTAG_NEWLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_formatted_textContext : ParserRuleContext {
		public ITerminalNode[] TEXT() { return GetTokens(YarnSpinnerV1Parser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(YarnSpinnerV1Parser.TEXT, i);
		}
		public ITerminalNode[] TEXT_EXPRESSION_START() { return GetTokens(YarnSpinnerV1Parser.TEXT_EXPRESSION_START); }
		public ITerminalNode TEXT_EXPRESSION_START(int i) {
			return GetToken(YarnSpinnerV1Parser.TEXT_EXPRESSION_START, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] EXPRESSION_END() { return GetTokens(YarnSpinnerV1Parser.EXPRESSION_END); }
		public ITerminalNode EXPRESSION_END(int i) {
			return GetToken(YarnSpinnerV1Parser.EXPRESSION_END, i);
		}
		public Format_functionContext[] format_function() {
			return GetRuleContexts<Format_functionContext>();
		}
		public Format_functionContext format_function(int i) {
			return GetRuleContext<Format_functionContext>(i);
		}
		public ITerminalNode[] FORMAT_FUNCTION_END() { return GetTokens(YarnSpinnerV1Parser.FORMAT_FUNCTION_END); }
		public ITerminalNode FORMAT_FUNCTION_END(int i) {
			return GetToken(YarnSpinnerV1Parser.FORMAT_FUNCTION_END, i);
		}
		public ITerminalNode[] FORMAT_FUNCTION_START() { return GetTokens(YarnSpinnerV1Parser.FORMAT_FUNCTION_START); }
		public ITerminalNode FORMAT_FUNCTION_START(int i) {
			return GetToken(YarnSpinnerV1Parser.FORMAT_FUNCTION_START, i);
		}
		public ITerminalNode[] TEXT_FORMAT_FUNCTION_START() { return GetTokens(YarnSpinnerV1Parser.TEXT_FORMAT_FUNCTION_START); }
		public ITerminalNode TEXT_FORMAT_FUNCTION_START(int i) {
			return GetToken(YarnSpinnerV1Parser.TEXT_FORMAT_FUNCTION_START, i);
		}
		public Line_formatted_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_formatted_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterLine_formatted_text(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitLine_formatted_text(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine_formatted_text(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_formatted_textContext line_formatted_text() {
		Line_formatted_textContext _localctx = new Line_formatted_textContext(Context, State);
		EnterRule(_localctx, 14, RULE_line_formatted_text);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FORMAT_FUNCTION_START) | (1L << TEXT_EXPRESSION_START) | (1L << TEXT_FORMAT_FUNCTION_START) | (1L << TEXT))) != 0)) {
				{
				State = 131;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEXT:
					{
					State = 122; Match(TEXT);
					}
					break;
				case TEXT_EXPRESSION_START:
					{
					State = 123; Match(TEXT_EXPRESSION_START);
					State = 124; expression(0);
					State = 125; Match(EXPRESSION_END);
					}
					break;
				case FORMAT_FUNCTION_START:
				case TEXT_FORMAT_FUNCTION_START:
					{
					State = 127;
					_la = TokenStream.LA(1);
					if ( !(_la==FORMAT_FUNCTION_START || _la==TEXT_FORMAT_FUNCTION_START) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 128; format_function();
					State = 129; Match(FORMAT_FUNCTION_END);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Format_functionContext : ParserRuleContext {
		public IToken function_name;
		public ITerminalNode FORMAT_FUNCTION_EXPRESSION_START() { return GetToken(YarnSpinnerV1Parser.FORMAT_FUNCTION_EXPRESSION_START, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode EXPRESSION_END() { return GetToken(YarnSpinnerV1Parser.EXPRESSION_END, 0); }
		public ITerminalNode FORMAT_FUNCTION_ID() { return GetToken(YarnSpinnerV1Parser.FORMAT_FUNCTION_ID, 0); }
		public Key_value_pairContext[] key_value_pair() {
			return GetRuleContexts<Key_value_pairContext>();
		}
		public Key_value_pairContext key_value_pair(int i) {
			return GetRuleContext<Key_value_pairContext>(i);
		}
		public Format_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_format_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterFormat_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitFormat_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormat_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Format_functionContext format_function() {
		Format_functionContext _localctx = new Format_functionContext(Context, State);
		EnterRule(_localctx, 16, RULE_format_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; _localctx.function_name = Match(FORMAT_FUNCTION_ID);
			State = 137; Match(FORMAT_FUNCTION_EXPRESSION_START);
			State = 138; variable();
			State = 139; Match(EXPRESSION_END);
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FORMAT_FUNCTION_ID || _la==FORMAT_FUNCTION_NUMBER) {
				{
				{
				State = 140; key_value_pair();
				}
				}
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_value_pairContext : ParserRuleContext {
		public Key_value_pairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_value_pair; } }
	 
		public Key_value_pairContext() { }
		public virtual void CopyFrom(Key_value_pairContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class KeyValuePairNumberContext : Key_value_pairContext {
		public IToken pair_key;
		public IToken pair_value;
		public ITerminalNode FORMAT_FUNCTION_EQUALS() { return GetToken(YarnSpinnerV1Parser.FORMAT_FUNCTION_EQUALS, 0); }
		public ITerminalNode FORMAT_FUNCTION_NUMBER() { return GetToken(YarnSpinnerV1Parser.FORMAT_FUNCTION_NUMBER, 0); }
		public ITerminalNode FORMAT_FUNCTION_STRING() { return GetToken(YarnSpinnerV1Parser.FORMAT_FUNCTION_STRING, 0); }
		public KeyValuePairNumberContext(Key_value_pairContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterKeyValuePairNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitKeyValuePairNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValuePairNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class KeyValuePairNamedContext : Key_value_pairContext {
		public IToken pair_key;
		public IToken pair_value;
		public ITerminalNode FORMAT_FUNCTION_EQUALS() { return GetToken(YarnSpinnerV1Parser.FORMAT_FUNCTION_EQUALS, 0); }
		public ITerminalNode FORMAT_FUNCTION_ID() { return GetToken(YarnSpinnerV1Parser.FORMAT_FUNCTION_ID, 0); }
		public ITerminalNode FORMAT_FUNCTION_STRING() { return GetToken(YarnSpinnerV1Parser.FORMAT_FUNCTION_STRING, 0); }
		public KeyValuePairNamedContext(Key_value_pairContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterKeyValuePairNamed(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitKeyValuePairNamed(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValuePairNamed(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Key_value_pairContext key_value_pair() {
		Key_value_pairContext _localctx = new Key_value_pairContext(Context, State);
		EnterRule(_localctx, 18, RULE_key_value_pair);
		try {
			State = 152;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORMAT_FUNCTION_ID:
				_localctx = new KeyValuePairNamedContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 146; ((KeyValuePairNamedContext)_localctx).pair_key = Match(FORMAT_FUNCTION_ID);
				State = 147; Match(FORMAT_FUNCTION_EQUALS);
				State = 148; ((KeyValuePairNamedContext)_localctx).pair_value = Match(FORMAT_FUNCTION_STRING);
				}
				break;
			case FORMAT_FUNCTION_NUMBER:
				_localctx = new KeyValuePairNumberContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 149; ((KeyValuePairNumberContext)_localctx).pair_key = Match(FORMAT_FUNCTION_NUMBER);
				State = 150; Match(FORMAT_FUNCTION_EQUALS);
				State = 151; ((KeyValuePairNumberContext)_localctx).pair_value = Match(FORMAT_FUNCTION_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HashtagContext : ParserRuleContext {
		public IToken text;
		public ITerminalNode TEXT_HASHTAG() { return GetToken(YarnSpinnerV1Parser.TEXT_HASHTAG, 0); }
		public ITerminalNode TEXT_COMMANDHASHTAG_HASHTAG() { return GetToken(YarnSpinnerV1Parser.TEXT_COMMANDHASHTAG_HASHTAG, 0); }
		public ITerminalNode HASHTAG_TAG() { return GetToken(YarnSpinnerV1Parser.HASHTAG_TAG, 0); }
		public ITerminalNode BODY_HASHTAG() { return GetToken(YarnSpinnerV1Parser.BODY_HASHTAG, 0); }
		public ITerminalNode HASHTAG() { return GetToken(YarnSpinnerV1Parser.HASHTAG, 0); }
		public ITerminalNode HASHTAG_TEXT() { return GetToken(YarnSpinnerV1Parser.HASHTAG_TEXT, 0); }
		public HashtagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hashtag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterHashtag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitHashtag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHashtag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HashtagContext hashtag() {
		HashtagContext _localctx = new HashtagContext(Context, State);
		EnterRule(_localctx, 20, RULE_hashtag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HASHTAG) | (1L << BODY_HASHTAG) | (1L << TEXT_HASHTAG) | (1L << TEXT_COMMANDHASHTAG_HASHTAG) | (1L << HASHTAG_TAG))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 155; _localctx.text = Match(HASHTAG_TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_conditionContext : ParserRuleContext {
		public ITerminalNode COMMAND_IF() { return GetToken(YarnSpinnerV1Parser.COMMAND_IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EXPRESSION_COMMAND_END() { return GetToken(YarnSpinnerV1Parser.EXPRESSION_COMMAND_END, 0); }
		public ITerminalNode TEXT_COMMANDHASHTAG_COMMAND_START() { return GetToken(YarnSpinnerV1Parser.TEXT_COMMANDHASHTAG_COMMAND_START, 0); }
		public ITerminalNode TEXT_COMMAND_START() { return GetToken(YarnSpinnerV1Parser.TEXT_COMMAND_START, 0); }
		public Line_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterLine_condition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitLine_condition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_conditionContext line_condition() {
		Line_conditionContext _localctx = new Line_conditionContext(Context, State);
		EnterRule(_localctx, 22, RULE_line_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			_la = TokenStream.LA(1);
			if ( !(_la==TEXT_COMMAND_START || _la==TEXT_COMMANDHASHTAG_COMMAND_START) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 158; Match(COMMAND_IF);
			State = 159; expression(0);
			State = 160; Match(EXPRESSION_COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpParensContext : ExpressionContext {
		public ITerminalNode LPAREN() { return GetToken(YarnSpinnerV1Parser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(YarnSpinnerV1Parser.RPAREN, 0); }
		public ExpParensContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterExpParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitExpParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpMultDivModContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OPERATOR_MATHS_MULTIPLICATION() { return GetToken(YarnSpinnerV1Parser.OPERATOR_MATHS_MULTIPLICATION, 0); }
		public ITerminalNode OPERATOR_MATHS_DIVISION() { return GetToken(YarnSpinnerV1Parser.OPERATOR_MATHS_DIVISION, 0); }
		public ITerminalNode OPERATOR_MATHS_MODULUS() { return GetToken(YarnSpinnerV1Parser.OPERATOR_MATHS_MODULUS, 0); }
		public ExpMultDivModContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterExpMultDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitExpMultDivMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpMultDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpMultDivModEqualsContext : ExpressionContext {
		public IToken op;
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode OPERATOR_MATHS_MULTIPLICATION_EQUALS() { return GetToken(YarnSpinnerV1Parser.OPERATOR_MATHS_MULTIPLICATION_EQUALS, 0); }
		public ITerminalNode OPERATOR_MATHS_DIVISION_EQUALS() { return GetToken(YarnSpinnerV1Parser.OPERATOR_MATHS_DIVISION_EQUALS, 0); }
		public ITerminalNode OPERATOR_MATHS_MODULUS_EQUALS() { return GetToken(YarnSpinnerV1Parser.OPERATOR_MATHS_MODULUS_EQUALS, 0); }
		public ExpMultDivModEqualsContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterExpMultDivModEquals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitExpMultDivModEquals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpMultDivModEquals(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpComparisonContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OPERATOR_LOGICAL_LESS_THAN_EQUALS() { return GetToken(YarnSpinnerV1Parser.OPERATOR_LOGICAL_LESS_THAN_EQUALS, 0); }
		public ITerminalNode OPERATOR_LOGICAL_GREATER_THAN_EQUALS() { return GetToken(YarnSpinnerV1Parser.OPERATOR_LOGICAL_GREATER_THAN_EQUALS, 0); }
		public ITerminalNode OPERATOR_LOGICAL_LESS() { return GetToken(YarnSpinnerV1Parser.OPERATOR_LOGICAL_LESS, 0); }
		public ITerminalNode OPERATOR_LOGICAL_GREATER() { return GetToken(YarnSpinnerV1Parser.OPERATOR_LOGICAL_GREATER, 0); }
		public ExpComparisonContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterExpComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitExpComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpNegativeContext : ExpressionContext {
		public ITerminalNode OPERATOR_MATHS_SUBTRACTION() { return GetToken(YarnSpinnerV1Parser.OPERATOR_MATHS_SUBTRACTION, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpNegativeContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterExpNegative(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitExpNegative(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpNegative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpAndOrXorContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OPERATOR_LOGICAL_AND() { return GetToken(YarnSpinnerV1Parser.OPERATOR_LOGICAL_AND, 0); }
		public ITerminalNode OPERATOR_LOGICAL_OR() { return GetToken(YarnSpinnerV1Parser.OPERATOR_LOGICAL_OR, 0); }
		public ITerminalNode OPERATOR_LOGICAL_XOR() { return GetToken(YarnSpinnerV1Parser.OPERATOR_LOGICAL_XOR, 0); }
		public ExpAndOrXorContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterExpAndOrXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitExpAndOrXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpAndOrXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpPlusMinusEqualsContext : ExpressionContext {
		public IToken op;
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode OPERATOR_MATHS_ADDITION_EQUALS() { return GetToken(YarnSpinnerV1Parser.OPERATOR_MATHS_ADDITION_EQUALS, 0); }
		public ITerminalNode OPERATOR_MATHS_SUBTRACTION_EQUALS() { return GetToken(YarnSpinnerV1Parser.OPERATOR_MATHS_SUBTRACTION_EQUALS, 0); }
		public ExpPlusMinusEqualsContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterExpPlusMinusEquals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitExpPlusMinusEquals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpPlusMinusEquals(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpAddSubContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OPERATOR_MATHS_ADDITION() { return GetToken(YarnSpinnerV1Parser.OPERATOR_MATHS_ADDITION, 0); }
		public ITerminalNode OPERATOR_MATHS_SUBTRACTION() { return GetToken(YarnSpinnerV1Parser.OPERATOR_MATHS_SUBTRACTION, 0); }
		public ExpAddSubContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterExpAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitExpAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpNotContext : ExpressionContext {
		public ITerminalNode OPERATOR_LOGICAL_NOT() { return GetToken(YarnSpinnerV1Parser.OPERATOR_LOGICAL_NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpNotContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterExpNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitExpNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpValueContext : ExpressionContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ExpValueContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterExpValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitExpValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpEqualityContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OPERATOR_LOGICAL_EQUALS() { return GetToken(YarnSpinnerV1Parser.OPERATOR_LOGICAL_EQUALS, 0); }
		public ITerminalNode OPERATOR_LOGICAL_NOT_EQUALS() { return GetToken(YarnSpinnerV1Parser.OPERATOR_LOGICAL_NOT_EQUALS, 0); }
		public ExpEqualityContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterExpEquality(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitExpEquality(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpEquality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				_localctx = new ExpParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 163; Match(LPAREN);
				State = 164; expression(0);
				State = 165; Match(RPAREN);
				}
				break;
			case 2:
				{
				_localctx = new ExpNegativeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 167; Match(OPERATOR_MATHS_SUBTRACTION);
				State = 168; expression(10);
				}
				break;
			case 3:
				{
				_localctx = new ExpNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 169; Match(OPERATOR_LOGICAL_NOT);
				State = 170; expression(9);
				}
				break;
			case 4:
				{
				_localctx = new ExpMultDivModEqualsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 171; variable();
				State = 172;
				((ExpMultDivModEqualsContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & ((1L << (OPERATOR_MATHS_MULTIPLICATION_EQUALS - 62)) | (1L << (OPERATOR_MATHS_MODULUS_EQUALS - 62)) | (1L << (OPERATOR_MATHS_DIVISION_EQUALS - 62)))) != 0)) ) {
					((ExpMultDivModEqualsContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 173; expression(4);
				}
				break;
			case 5:
				{
				_localctx = new ExpPlusMinusEqualsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 175; variable();
				State = 176;
				((ExpPlusMinusEqualsContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OPERATOR_MATHS_ADDITION_EQUALS || _la==OPERATOR_MATHS_SUBTRACTION_EQUALS) ) {
					((ExpPlusMinusEqualsContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 177; expression(3);
				}
				break;
			case 6:
				{
				_localctx = new ExpValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 179; value();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 199;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 197;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new ExpMultDivModContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 182;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 183;
						((ExpMultDivModContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OPERATOR_MATHS_MULTIPLICATION - 67)) | (1L << (OPERATOR_MATHS_DIVISION - 67)) | (1L << (OPERATOR_MATHS_MODULUS - 67)))) != 0)) ) {
							((ExpMultDivModContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 184; expression(9);
						}
						break;
					case 2:
						{
						_localctx = new ExpAddSubContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 185;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 186;
						((ExpAddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OPERATOR_MATHS_ADDITION || _la==OPERATOR_MATHS_SUBTRACTION) ) {
							((ExpAddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 187; expression(8);
						}
						break;
					case 3:
						{
						_localctx = new ExpComparisonContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 188;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 189;
						((ExpComparisonContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPERATOR_LOGICAL_LESS_THAN_EQUALS) | (1L << OPERATOR_LOGICAL_GREATER_THAN_EQUALS) | (1L << OPERATOR_LOGICAL_LESS) | (1L << OPERATOR_LOGICAL_GREATER))) != 0)) ) {
							((ExpComparisonContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 190; expression(7);
						}
						break;
					case 4:
						{
						_localctx = new ExpEqualityContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 191;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 192;
						((ExpEqualityContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OPERATOR_LOGICAL_EQUALS || _la==OPERATOR_LOGICAL_NOT_EQUALS) ) {
							((ExpEqualityContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 193; expression(6);
						}
						break;
					case 5:
						{
						_localctx = new ExpAndOrXorContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 194;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 195;
						((ExpAndOrXorContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPERATOR_LOGICAL_AND) | (1L << OPERATOR_LOGICAL_OR) | (1L << OPERATOR_LOGICAL_XOR))) != 0)) ) {
							((ExpAndOrXorContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 196; expression(3);
						}
						break;
					}
					} 
				}
				State = 201;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueNullContext : ValueContext {
		public ITerminalNode KEYWORD_NULL() { return GetToken(YarnSpinnerV1Parser.KEYWORD_NULL, 0); }
		public ValueNullContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterValueNull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitValueNull(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueNull(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueNumberContext : ValueContext {
		public ITerminalNode NUMBER() { return GetToken(YarnSpinnerV1Parser.NUMBER, 0); }
		public ValueNumberContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterValueNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitValueNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueTrueContext : ValueContext {
		public ITerminalNode KEYWORD_TRUE() { return GetToken(YarnSpinnerV1Parser.KEYWORD_TRUE, 0); }
		public ValueTrueContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterValueTrue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitValueTrue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueFalseContext : ValueContext {
		public ITerminalNode KEYWORD_FALSE() { return GetToken(YarnSpinnerV1Parser.KEYWORD_FALSE, 0); }
		public ValueFalseContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterValueFalse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitValueFalse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueFuncContext : ValueContext {
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public ValueFuncContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterValueFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitValueFunc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueFunc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueVarContext : ValueContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ValueVarContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterValueVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitValueVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueStringContext : ValueContext {
		public ITerminalNode STRING() { return GetToken(YarnSpinnerV1Parser.STRING, 0); }
		public ValueStringContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterValueString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitValueString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 26, RULE_value);
		try {
			State = 209;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				_localctx = new ValueNumberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 202; Match(NUMBER);
				}
				break;
			case KEYWORD_TRUE:
				_localctx = new ValueTrueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 203; Match(KEYWORD_TRUE);
				}
				break;
			case KEYWORD_FALSE:
				_localctx = new ValueFalseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 204; Match(KEYWORD_FALSE);
				}
				break;
			case VAR_ID:
				_localctx = new ValueVarContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 205; variable();
				}
				break;
			case STRING:
				_localctx = new ValueStringContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 206; Match(STRING);
				}
				break;
			case KEYWORD_NULL:
				_localctx = new ValueNullContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 207; Match(KEYWORD_NULL);
				}
				break;
			case FUNC_ID:
				_localctx = new ValueFuncContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 208; function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode VAR_ID() { return GetToken(YarnSpinnerV1Parser.VAR_ID, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 28, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211; Match(VAR_ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public ITerminalNode FUNC_ID() { return GetToken(YarnSpinnerV1Parser.FUNC_ID, 0); }
		public ITerminalNode LPAREN() { return GetToken(YarnSpinnerV1Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(YarnSpinnerV1Parser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(YarnSpinnerV1Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(YarnSpinnerV1Parser.COMMA, i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 30, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; Match(FUNC_ID);
			State = 214; Match(LPAREN);
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & ((1L << (KEYWORD_TRUE - 46)) | (1L << (KEYWORD_FALSE - 46)) | (1L << (KEYWORD_NULL - 46)) | (1L << (OPERATOR_LOGICAL_NOT - 46)) | (1L << (OPERATOR_MATHS_SUBTRACTION - 46)) | (1L << (LPAREN - 46)) | (1L << (STRING - 46)) | (1L << (FUNC_ID - 46)) | (1L << (VAR_ID - 46)) | (1L << (NUMBER - 46)))) != 0)) {
				{
				State = 215; expression(0);
				}
			}

			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 218; Match(COMMA);
				State = 219; expression(0);
				}
				}
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 225; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public If_clauseContext if_clause() {
			return GetRuleContext<If_clauseContext>(0);
		}
		public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerV1Parser.COMMAND_START, 0); }
		public ITerminalNode COMMAND_ENDIF() { return GetToken(YarnSpinnerV1Parser.COMMAND_ENDIF, 0); }
		public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerV1Parser.COMMAND_END, 0); }
		public Else_if_clauseContext[] else_if_clause() {
			return GetRuleContexts<Else_if_clauseContext>();
		}
		public Else_if_clauseContext else_if_clause(int i) {
			return GetRuleContext<Else_if_clauseContext>(i);
		}
		public Else_clauseContext else_clause() {
			return GetRuleContext<Else_clauseContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 32, RULE_if_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 227; if_clause();
			State = 231;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 228; else_if_clause();
					}
					} 
				}
				State = 233;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			State = 235;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 234; else_clause();
				}
				break;
			}
			State = 237; Match(COMMAND_START);
			State = 238; Match(COMMAND_ENDIF);
			State = 239; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_clauseContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerV1Parser.COMMAND_START, 0); }
		public ITerminalNode COMMAND_IF() { return GetToken(YarnSpinnerV1Parser.COMMAND_IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EXPRESSION_COMMAND_END() { return GetToken(YarnSpinnerV1Parser.EXPRESSION_COMMAND_END, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public If_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterIf_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitIf_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_clauseContext if_clause() {
		If_clauseContext _localctx = new If_clauseContext(Context, State);
		EnterRule(_localctx, 34, RULE_if_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 241; Match(COMMAND_START);
			State = 242; Match(COMMAND_IF);
			State = 243; expression(0);
			State = 244; Match(EXPRESSION_COMMAND_END);
			State = 248;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 245; statement();
					}
					} 
				}
				State = 250;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_if_clauseContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerV1Parser.COMMAND_START, 0); }
		public ITerminalNode COMMAND_ELSEIF() { return GetToken(YarnSpinnerV1Parser.COMMAND_ELSEIF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EXPRESSION_COMMAND_END() { return GetToken(YarnSpinnerV1Parser.EXPRESSION_COMMAND_END, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Else_if_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_if_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterElse_if_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitElse_if_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_if_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_if_clauseContext else_if_clause() {
		Else_if_clauseContext _localctx = new Else_if_clauseContext(Context, State);
		EnterRule(_localctx, 36, RULE_else_if_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 251; Match(COMMAND_START);
			State = 252; Match(COMMAND_ELSEIF);
			State = 253; expression(0);
			State = 254; Match(EXPRESSION_COMMAND_END);
			State = 258;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 255; statement();
					}
					} 
				}
				State = 260;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_clauseContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerV1Parser.COMMAND_START, 0); }
		public ITerminalNode COMMAND_ELSE() { return GetToken(YarnSpinnerV1Parser.COMMAND_ELSE, 0); }
		public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerV1Parser.COMMAND_END, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Else_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterElse_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitElse_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_clauseContext else_clause() {
		Else_clauseContext _localctx = new Else_clauseContext(Context, State);
		EnterRule(_localctx, 38, RULE_else_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 261; Match(COMMAND_START);
			State = 262; Match(COMMAND_ELSE);
			State = 263; Match(COMMAND_END);
			State = 267;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 264; statement();
					}
					} 
				}
				State = 269;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_statementContext : ParserRuleContext {
		public Set_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_statement; } }
	 
		public Set_statementContext() { }
		public virtual void CopyFrom(Set_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SetExpressionContext : Set_statementContext {
		public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerV1Parser.COMMAND_START, 0); }
		public ITerminalNode COMMAND_SET() { return GetToken(YarnSpinnerV1Parser.COMMAND_SET, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EXPRESSION_COMMAND_END() { return GetToken(YarnSpinnerV1Parser.EXPRESSION_COMMAND_END, 0); }
		public SetExpressionContext(Set_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterSetExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitSetExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetVariableToValueContext : Set_statementContext {
		public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerV1Parser.COMMAND_START, 0); }
		public ITerminalNode COMMAND_SET() { return GetToken(YarnSpinnerV1Parser.COMMAND_SET, 0); }
		public ITerminalNode VAR_ID() { return GetToken(YarnSpinnerV1Parser.VAR_ID, 0); }
		public ITerminalNode OPERATOR_ASSIGNMENT() { return GetToken(YarnSpinnerV1Parser.OPERATOR_ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EXPRESSION_COMMAND_END() { return GetToken(YarnSpinnerV1Parser.EXPRESSION_COMMAND_END, 0); }
		public SetVariableToValueContext(Set_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterSetVariableToValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitSetVariableToValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetVariableToValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_statementContext set_statement() {
		Set_statementContext _localctx = new Set_statementContext(Context, State);
		EnterRule(_localctx, 40, RULE_set_statement);
		try {
			State = 282;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				_localctx = new SetVariableToValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 270; Match(COMMAND_START);
				State = 271; Match(COMMAND_SET);
				State = 272; Match(VAR_ID);
				State = 273; Match(OPERATOR_ASSIGNMENT);
				State = 274; expression(0);
				State = 275; Match(EXPRESSION_COMMAND_END);
				}
				break;
			case 2:
				_localctx = new SetExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 277; Match(COMMAND_START);
				State = 278; Match(COMMAND_SET);
				State = 279; expression(0);
				State = 280; Match(EXPRESSION_COMMAND_END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_statementContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerV1Parser.COMMAND_START, 0); }
		public ITerminalNode COMMAND_CALL() { return GetToken(YarnSpinnerV1Parser.COMMAND_CALL, 0); }
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public ITerminalNode EXPRESSION_COMMAND_END() { return GetToken(YarnSpinnerV1Parser.EXPRESSION_COMMAND_END, 0); }
		public Call_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterCall_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitCall_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_statementContext call_statement() {
		Call_statementContext _localctx = new Call_statementContext(Context, State);
		EnterRule(_localctx, 42, RULE_call_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284; Match(COMMAND_START);
			State = 285; Match(COMMAND_CALL);
			State = 286; function();
			State = 287; Match(EXPRESSION_COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Command_statementContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerV1Parser.COMMAND_START, 0); }
		public Command_formatted_textContext command_formatted_text() {
			return GetRuleContext<Command_formatted_textContext>(0);
		}
		public ITerminalNode COMMAND_TEXT_END() { return GetToken(YarnSpinnerV1Parser.COMMAND_TEXT_END, 0); }
		public ITerminalNode TEXT_COMMANDHASHTAG_NEWLINE() { return GetToken(YarnSpinnerV1Parser.TEXT_COMMANDHASHTAG_NEWLINE, 0); }
		public HashtagContext[] hashtag() {
			return GetRuleContexts<HashtagContext>();
		}
		public HashtagContext hashtag(int i) {
			return GetRuleContext<HashtagContext>(i);
		}
		public Command_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterCommand_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitCommand_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Command_statementContext command_statement() {
		Command_statementContext _localctx = new Command_statementContext(Context, State);
		EnterRule(_localctx, 44, RULE_command_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289; Match(COMMAND_START);
			State = 290; command_formatted_text();
			State = 291; Match(COMMAND_TEXT_END);
			State = 299;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HASHTAG) | (1L << BODY_HASHTAG) | (1L << TEXT_HASHTAG) | (1L << TEXT_COMMANDHASHTAG_HASHTAG) | (1L << HASHTAG_TAG))) != 0)) {
					{
					{
					State = 292; hashtag();
					}
					}
					State = 297;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 298; Match(TEXT_COMMANDHASHTAG_NEWLINE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Command_formatted_textContext : ParserRuleContext {
		public ITerminalNode[] COMMAND_TEXT() { return GetTokens(YarnSpinnerV1Parser.COMMAND_TEXT); }
		public ITerminalNode COMMAND_TEXT(int i) {
			return GetToken(YarnSpinnerV1Parser.COMMAND_TEXT, i);
		}
		public ITerminalNode[] COMMAND_EXPRESSION_START() { return GetTokens(YarnSpinnerV1Parser.COMMAND_EXPRESSION_START); }
		public ITerminalNode COMMAND_EXPRESSION_START(int i) {
			return GetToken(YarnSpinnerV1Parser.COMMAND_EXPRESSION_START, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] EXPRESSION_END() { return GetTokens(YarnSpinnerV1Parser.EXPRESSION_END); }
		public ITerminalNode EXPRESSION_END(int i) {
			return GetToken(YarnSpinnerV1Parser.EXPRESSION_END, i);
		}
		public Command_formatted_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command_formatted_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterCommand_formatted_text(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitCommand_formatted_text(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand_formatted_text(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Command_formatted_textContext command_formatted_text() {
		Command_formatted_textContext _localctx = new Command_formatted_textContext(Context, State);
		EnterRule(_localctx, 46, RULE_command_formatted_text);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMAND_EXPRESSION_START || _la==COMMAND_TEXT) {
				{
				State = 306;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case COMMAND_TEXT:
					{
					State = 301; Match(COMMAND_TEXT);
					}
					break;
				case COMMAND_EXPRESSION_START:
					{
					State = 302; Match(COMMAND_EXPRESSION_START);
					State = 303; expression(0);
					State = 304; Match(EXPRESSION_END);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shortcut_option_statementContext : ParserRuleContext {
		public Shortcut_optionContext[] shortcut_option() {
			return GetRuleContexts<Shortcut_optionContext>();
		}
		public Shortcut_optionContext shortcut_option(int i) {
			return GetRuleContext<Shortcut_optionContext>(i);
		}
		public Shortcut_option_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortcut_option_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterShortcut_option_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitShortcut_option_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortcut_option_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shortcut_option_statementContext shortcut_option_statement() {
		Shortcut_option_statementContext _localctx = new Shortcut_option_statementContext(Context, State);
		EnterRule(_localctx, 48, RULE_shortcut_option_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 311; shortcut_option();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 314;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shortcut_optionContext : ParserRuleContext {
		public ITerminalNode SHORTCUT_ARROW() { return GetToken(YarnSpinnerV1Parser.SHORTCUT_ARROW, 0); }
		public Line_statementContext line_statement() {
			return GetRuleContext<Line_statementContext>(0);
		}
		public ITerminalNode INDENT() { return GetToken(YarnSpinnerV1Parser.INDENT, 0); }
		public ITerminalNode DEDENT() { return GetToken(YarnSpinnerV1Parser.DEDENT, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Shortcut_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortcut_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterShortcut_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitShortcut_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortcut_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shortcut_optionContext shortcut_option() {
		Shortcut_optionContext _localctx = new Shortcut_optionContext(Context, State);
		EnterRule(_localctx, 50, RULE_shortcut_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316; Match(SHORTCUT_ARROW);
			State = 317; line_statement();
			State = 326;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 318; Match(INDENT);
				State = 322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INDENT) | (1L << HASHTAG) | (1L << SHORTCUT_ARROW) | (1L << COMMAND_START) | (1L << OPTION_START) | (1L << FORMAT_FUNCTION_START) | (1L << BODY_HASHTAG) | (1L << TEXT_NEWLINE) | (1L << TEXT_HASHTAG) | (1L << TEXT_EXPRESSION_START) | (1L << TEXT_COMMAND_START) | (1L << TEXT_FORMAT_FUNCTION_START) | (1L << TEXT) | (1L << TEXT_COMMANDHASHTAG_COMMAND_START) | (1L << TEXT_COMMANDHASHTAG_HASHTAG) | (1L << TEXT_COMMANDHASHTAG_NEWLINE) | (1L << HASHTAG_TAG))) != 0)) {
					{
					{
					State = 319; statement();
					}
					}
					State = 324;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 325; Match(DEDENT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_statementContext : ParserRuleContext {
		public Option_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_statement; } }
	 
		public Option_statementContext() { }
		public virtual void CopyFrom(Option_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OptionLinkContext : Option_statementContext {
		public IToken NodeName;
		public ITerminalNode OPTION_START() { return GetToken(YarnSpinnerV1Parser.OPTION_START, 0); }
		public Option_formatted_textContext option_formatted_text() {
			return GetRuleContext<Option_formatted_textContext>(0);
		}
		public ITerminalNode OPTION_DELIMIT() { return GetToken(YarnSpinnerV1Parser.OPTION_DELIMIT, 0); }
		public ITerminalNode OPTION_END() { return GetToken(YarnSpinnerV1Parser.OPTION_END, 0); }
		public ITerminalNode OPTION_ID() { return GetToken(YarnSpinnerV1Parser.OPTION_ID, 0); }
		public ITerminalNode TEXT_COMMANDHASHTAG_NEWLINE() { return GetToken(YarnSpinnerV1Parser.TEXT_COMMANDHASHTAG_NEWLINE, 0); }
		public HashtagContext[] hashtag() {
			return GetRuleContexts<HashtagContext>();
		}
		public HashtagContext hashtag(int i) {
			return GetRuleContext<HashtagContext>(i);
		}
		public OptionLinkContext(Option_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterOptionLink(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitOptionLink(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionLink(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionJumpContext : Option_statementContext {
		public IToken NodeName;
		public ITerminalNode OPTION_START() { return GetToken(YarnSpinnerV1Parser.OPTION_START, 0); }
		public ITerminalNode OPTION_END() { return GetToken(YarnSpinnerV1Parser.OPTION_END, 0); }
		public ITerminalNode OPTION_TEXT() { return GetToken(YarnSpinnerV1Parser.OPTION_TEXT, 0); }
		public OptionJumpContext(Option_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterOptionJump(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitOptionJump(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionJump(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Option_statementContext option_statement() {
		Option_statementContext _localctx = new Option_statementContext(Context, State);
		EnterRule(_localctx, 52, RULE_option_statement);
		int _la;
		try {
			State = 345;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				_localctx = new OptionLinkContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 328; Match(OPTION_START);
				State = 329; option_formatted_text();
				State = 330; Match(OPTION_DELIMIT);
				State = 331; ((OptionLinkContext)_localctx).NodeName = Match(OPTION_ID);
				State = 332; Match(OPTION_END);
				State = 340;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					State = 336;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HASHTAG) | (1L << BODY_HASHTAG) | (1L << TEXT_HASHTAG) | (1L << TEXT_COMMANDHASHTAG_HASHTAG) | (1L << HASHTAG_TAG))) != 0)) {
						{
						{
						State = 333; hashtag();
						}
						}
						State = 338;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 339; Match(TEXT_COMMANDHASHTAG_NEWLINE);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new OptionJumpContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 342; Match(OPTION_START);
				State = 343; ((OptionJumpContext)_localctx).NodeName = Match(OPTION_TEXT);
				State = 344; Match(OPTION_END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_formatted_textContext : ParserRuleContext {
		public ITerminalNode[] OPTION_TEXT() { return GetTokens(YarnSpinnerV1Parser.OPTION_TEXT); }
		public ITerminalNode OPTION_TEXT(int i) {
			return GetToken(YarnSpinnerV1Parser.OPTION_TEXT, i);
		}
		public ITerminalNode[] OPTION_EXPRESSION_START() { return GetTokens(YarnSpinnerV1Parser.OPTION_EXPRESSION_START); }
		public ITerminalNode OPTION_EXPRESSION_START(int i) {
			return GetToken(YarnSpinnerV1Parser.OPTION_EXPRESSION_START, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] EXPRESSION_END() { return GetTokens(YarnSpinnerV1Parser.EXPRESSION_END); }
		public ITerminalNode EXPRESSION_END(int i) {
			return GetToken(YarnSpinnerV1Parser.EXPRESSION_END, i);
		}
		public ITerminalNode[] OPTION_FORMAT_FUNCTION_START() { return GetTokens(YarnSpinnerV1Parser.OPTION_FORMAT_FUNCTION_START); }
		public ITerminalNode OPTION_FORMAT_FUNCTION_START(int i) {
			return GetToken(YarnSpinnerV1Parser.OPTION_FORMAT_FUNCTION_START, i);
		}
		public Format_functionContext[] format_function() {
			return GetRuleContexts<Format_functionContext>();
		}
		public Format_functionContext format_function(int i) {
			return GetRuleContext<Format_functionContext>(i);
		}
		public ITerminalNode[] FORMAT_FUNCTION_END() { return GetTokens(YarnSpinnerV1Parser.FORMAT_FUNCTION_END); }
		public ITerminalNode FORMAT_FUNCTION_END(int i) {
			return GetToken(YarnSpinnerV1Parser.FORMAT_FUNCTION_END, i);
		}
		public Option_formatted_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_formatted_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.EnterOption_formatted_text(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerV1ParserListener typedListener = listener as IYarnSpinnerV1ParserListener;
			if (typedListener != null) typedListener.ExitOption_formatted_text(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerV1ParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerV1ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption_formatted_text(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Option_formatted_textContext option_formatted_text() {
		Option_formatted_textContext _localctx = new Option_formatted_textContext(Context, State);
		EnterRule(_localctx, 54, RULE_option_formatted_text);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 356;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPTION_TEXT:
					{
					State = 347; Match(OPTION_TEXT);
					}
					break;
				case OPTION_EXPRESSION_START:
					{
					State = 348; Match(OPTION_EXPRESSION_START);
					State = 349; expression(0);
					State = 350; Match(EXPRESSION_END);
					}
					break;
				case OPTION_FORMAT_FUNCTION_START:
					{
					State = 352; Match(OPTION_FORMAT_FUNCTION_START);
					State = 353; format_function();
					State = 354; Match(FORMAT_FUNCTION_END);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & ((1L << (OPTION_EXPRESSION_START - 94)) | (1L << (OPTION_FORMAT_FUNCTION_START - 94)) | (1L << (OPTION_TEXT - 94)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x64', '\x16B', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x3', '\x2', '\a', '\x2', '<', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '?', '\v', '\x2', '\x3', '\x2', '\x6', '\x2', '\x42', '\n', '\x2', 
		'\r', '\x2', '\xE', '\x2', '\x43', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x6', '\x4', 'K', '\n', '\x4', '\r', 
		'\x4', '\xE', '\x4', 'L', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'V', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\a', '\x6', '[', '\n', 
		'\x6', '\f', '\x6', '\xE', '\x6', '^', '\v', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\a', '\a', 'i', '\n', '\a', '\f', '\a', '\xE', 
		'\a', 'l', '\v', '\a', '\x3', '\a', '\x5', '\a', 'o', '\n', '\a', '\x3', 
		'\b', '\x3', '\b', '\x5', '\b', 's', '\n', '\b', '\x3', '\b', '\a', '\b', 
		'v', '\n', '\b', '\f', '\b', '\xE', '\b', 'y', '\v', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 
		'\x86', '\n', '\t', '\f', '\t', '\xE', '\t', '\x89', '\v', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', 
		'\x90', '\n', '\n', '\f', '\n', '\xE', '\n', '\x93', '\v', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x5', '\v', '\x9B', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xB7', '\n', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\a', '\xE', '\xC8', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xCB', '\v', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xD4', '\n', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\xDB', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', 
		'\x11', '\xDF', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xE2', '\v', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\a', 
		'\x12', '\xE8', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\xEB', '\v', 
		'\x12', '\x3', '\x12', '\x5', '\x12', '\xEE', '\n', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\xF9', '\n', 
		'\x13', '\f', '\x13', '\xE', '\x13', '\xFC', '\v', '\x13', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', 
		'\x103', '\n', '\x14', '\f', '\x14', '\xE', '\x14', '\x106', '\v', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', 
		'\x10C', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\x10F', '\v', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x11D', '\n', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', '\x18', '\x128', 
		'\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x12B', '\v', '\x18', '\x3', 
		'\x18', '\x5', '\x18', '\x12E', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\x135', '\n', 
		'\x19', '\f', '\x19', '\xE', '\x19', '\x138', '\v', '\x19', '\x3', '\x1A', 
		'\x6', '\x1A', '\x13B', '\n', '\x1A', '\r', '\x1A', '\xE', '\x1A', '\x13C', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B', 
		'\x143', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x146', '\v', '\x1B', 
		'\x3', '\x1B', '\x5', '\x1B', '\x149', '\n', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\a', 
		'\x1C', '\x151', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x154', '\v', 
		'\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x157', '\n', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x15C', '\n', '\x1C', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x6', '\x1D', '\x167', 
		'\n', '\x1D', '\r', '\x1D', '\xE', '\x1D', '\x168', '\x3', '\x1D', '\x2', 
		'\x3', '\x1A', '\x1E', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', '\x2', 
		'\r', '\x4', '\x2', '\x17', '\x17', '#', '#', '\x4', '\x2', '\x15', '\x15', 
		'\x1B', '\x1B', '\a', '\x2', '\n', '\n', '\x16', '\x16', '\x18', '\x18', 
		'\"', '\"', '&', '&', '\x4', '\x2', '\x1A', '\x1A', '!', '!', '\x3', '\x2', 
		'@', '\x42', '\x3', '\x2', '>', '?', '\x3', '\x2', '\x45', 'G', '\x3', 
		'\x2', '\x43', '\x44', '\x4', '\x2', '\x34', '\x35', '\x37', '\x38', '\x4', 
		'\x2', '\x36', '\x36', '\x39', '\x39', '\x3', '\x2', ':', '<', '\x2', 
		'\x187', '\x2', '=', '\x3', '\x2', '\x2', '\x2', '\x4', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x6', 'J', '\x3', '\x2', '\x2', '\x2', '\b', 'R', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\\', '\x3', '\x2', '\x2', '\x2', '\f', 
		'n', '\x3', '\x2', '\x2', '\x2', '\xE', 'p', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\x87', '\x3', '\x2', '\x2', '\x2', '\x12', '\x8A', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x16', '\x9C', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x9F', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\xB6', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\xD5', '\x3', '\x2', '\x2', '\x2', ' ', '\xD7', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\xE5', '\x3', '\x2', '\x2', '\x2', 
		'$', '\xF3', '\x3', '\x2', '\x2', '\x2', '&', '\xFD', '\x3', '\x2', '\x2', 
		'\x2', '(', '\x107', '\x3', '\x2', '\x2', '\x2', '*', '\x11C', '\x3', 
		'\x2', '\x2', '\x2', ',', '\x11E', '\x3', '\x2', '\x2', '\x2', '.', '\x123', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x136', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x34', '\x13E', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x38', '\x166', 
		'\x3', '\x2', '\x2', '\x2', ':', '<', '\x5', '\x4', '\x3', '\x2', ';', 
		':', '\x3', '\x2', '\x2', '\x2', '<', '?', '\x3', '\x2', '\x2', '\x2', 
		'=', ';', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x41', '\x3', '\x2', '\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x42', '\x5', '\x6', '\x4', '\x2', '\x41', '@', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x3', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\a', '\n', 
		'\x2', '\x2', '\x46', 'G', '\a', '\'', '\x2', '\x2', 'G', 'H', '\a', '#', 
		'\x2', '\x2', 'H', '\x5', '\x3', '\x2', '\x2', '\x2', 'I', 'K', '\x5', 
		'\b', '\x5', '\x2', 'J', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', 
		'\b', '\x2', '\x2', 'O', 'P', '\x5', '\n', '\x6', '\x2', 'P', 'Q', '\a', 
		'\x11', '\x2', '\x2', 'Q', '\a', '\x3', '\x2', '\x2', '\x2', 'R', 'S', 
		'\a', '\a', '\x2', '\x2', 'S', 'U', '\a', '\t', '\x2', '\x2', 'T', 'V', 
		'\a', '\v', '\x2', '\x2', 'U', 'T', '\x3', '\x2', '\x2', '\x2', 'U', 'V', 
		'\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', 
		'X', '\a', '\f', '\x2', '\x2', 'X', '\t', '\x3', '\x2', '\x2', '\x2', 
		'Y', '[', '\x5', '\f', '\a', '\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'[', '^', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', '\v', '\x3', '\x2', 
		'\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '_', 'o', '\x5', 
		'\xE', '\b', '\x2', '`', 'o', '\x5', '\"', '\x12', '\x2', '\x61', 'o', 
		'\x5', '*', '\x16', '\x2', '\x62', 'o', '\x5', '\x36', '\x1C', '\x2', 
		'\x63', 'o', '\x5', '\x32', '\x1A', '\x2', '\x64', 'o', '\x5', ',', '\x17', 
		'\x2', '\x65', 'o', '\x5', '.', '\x18', '\x2', '\x66', 'j', '\a', '\x3', 
		'\x2', '\x2', 'g', 'i', '\x5', '\f', '\a', '\x2', 'h', 'g', '\x3', '\x2', 
		'\x2', '\x2', 'i', 'l', '\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'l', 'j', '\x3', '\x2', '\x2', '\x2', 'm', 'o', '\a', '\x4', 
		'\x2', '\x2', 'n', '_', '\x3', '\x2', '\x2', '\x2', 'n', '`', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x61', '\x3', '\x2', '\x2', '\x2', 'n', '\x62', '\x3', 
		'\x2', '\x2', '\x2', 'n', '\x63', '\x3', '\x2', '\x2', '\x2', 'n', '\x64', 
		'\x3', '\x2', '\x2', '\x2', 'n', '\x65', '\x3', '\x2', '\x2', '\x2', 'n', 
		'\x66', '\x3', '\x2', '\x2', '\x2', 'o', '\r', '\x3', '\x2', '\x2', '\x2', 
		'p', 'r', '\x5', '\x10', '\t', '\x2', 'q', 's', '\x5', '\x18', '\r', '\x2', 
		'r', 'q', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 
		's', 'w', '\x3', '\x2', '\x2', '\x2', 't', 'v', '\x5', '\x16', '\f', '\x2', 
		'u', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'y', '\x3', '\x2', '\x2', '\x2', 
		'w', 'u', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 
		'x', 'z', '\x3', '\x2', '\x2', '\x2', 'y', 'w', '\x3', '\x2', '\x2', '\x2', 
		'z', '{', '\t', '\x2', '\x2', '\x2', '{', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '|', '\x86', '\a', '\x1D', '\x2', '\x2', '}', '~', '\a', '\x19', 
		'\x2', '\x2', '~', '\x7F', '\x5', '\x1A', '\xE', '\x2', '\x7F', '\x80', 
		'\a', 'M', '\x2', '\x2', '\x80', '\x86', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x82', '\t', '\x3', '\x2', '\x2', '\x82', '\x83', '\x5', '\x12', '\n', 
		'\x2', '\x83', '\x84', '\a', '.', '\x2', '\x2', '\x84', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x85', '|', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x85', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x89', '\x3', '\x2', '\x2', '\x2', '\x87', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x87', '\x88', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x89', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8B', '\a', ')', '\x2', '\x2', '\x8B', '\x8C', '\a', 
		'+', '\x2', '\x2', '\x8C', '\x8D', '\x5', '\x1E', '\x10', '\x2', '\x8D', 
		'\x91', '\a', 'M', '\x2', '\x2', '\x8E', '\x90', '\x5', '\x14', '\v', 
		'\x2', '\x8F', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x90', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x92', '\x3', '\x2', '\x2', '\x2', '\x92', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '\x91', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\a', 
		')', '\x2', '\x2', '\x95', '\x96', '\a', ',', '\x2', '\x2', '\x96', '\x9B', 
		'\a', '-', '\x2', '\x2', '\x97', '\x98', '\a', '*', '\x2', '\x2', '\x98', 
		'\x99', '\a', ',', '\x2', '\x2', '\x99', '\x9B', '\a', '-', '\x2', '\x2', 
		'\x9A', '\x94', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x97', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x15', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', 
		'\t', '\x4', '\x2', '\x2', '\x9D', '\x9E', '\a', '\'', '\x2', '\x2', '\x9E', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\t', '\x5', '\x2', 
		'\x2', '\xA0', '\xA1', '\a', 'R', '\x2', '\x2', '\xA1', '\xA2', '\x5', 
		'\x1A', '\xE', '\x2', '\xA2', '\xA3', '\a', 'N', '\x2', '\x2', '\xA3', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\b', '\xE', '\x1', 
		'\x2', '\xA5', '\xA6', '\a', 'H', '\x2', '\x2', '\xA6', '\xA7', '\x5', 
		'\x1A', '\xE', '\x2', '\xA7', '\xA8', '\a', 'I', '\x2', '\x2', '\xA8', 
		'\xB7', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\a', '\x44', '\x2', 
		'\x2', '\xAA', '\xB7', '\x5', '\x1A', '\xE', '\f', '\xAB', '\xAC', '\a', 
		'=', '\x2', '\x2', '\xAC', '\xB7', '\x5', '\x1A', '\xE', '\v', '\xAD', 
		'\xAE', '\x5', '\x1E', '\x10', '\x2', '\xAE', '\xAF', '\t', '\x6', '\x2', 
		'\x2', '\xAF', '\xB0', '\x5', '\x1A', '\xE', '\x6', '\xB0', '\xB7', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xB2', '\x5', '\x1E', '\x10', '\x2', '\xB2', 
		'\xB3', '\t', '\a', '\x2', '\x2', '\xB3', '\xB4', '\x5', '\x1A', '\xE', 
		'\x5', '\xB4', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB7', '\x5', 
		'\x1C', '\xF', '\x2', '\xB6', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\f', '\n', '\x2', 
		'\x2', '\xB9', '\xBA', '\t', '\b', '\x2', '\x2', '\xBA', '\xC8', '\x5', 
		'\x1A', '\xE', '\v', '\xBB', '\xBC', '\f', '\t', '\x2', '\x2', '\xBC', 
		'\xBD', '\t', '\t', '\x2', '\x2', '\xBD', '\xC8', '\x5', '\x1A', '\xE', 
		'\n', '\xBE', '\xBF', '\f', '\b', '\x2', '\x2', '\xBF', '\xC0', '\t', 
		'\n', '\x2', '\x2', '\xC0', '\xC8', '\x5', '\x1A', '\xE', '\t', '\xC1', 
		'\xC2', '\f', '\a', '\x2', '\x2', '\xC2', '\xC3', '\t', '\v', '\x2', '\x2', 
		'\xC3', '\xC8', '\x5', '\x1A', '\xE', '\b', '\xC4', '\xC5', '\f', '\x4', 
		'\x2', '\x2', '\xC5', '\xC6', '\t', '\f', '\x2', '\x2', '\xC6', '\xC8', 
		'\x5', '\x1A', '\xE', '\x5', '\xC7', '\xB8', '\x3', '\x2', '\x2', '\x2', 
		'\xC7', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xBE', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC4', 
		'\x3', '\x2', '\x2', '\x2', '\xC8', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\xC9', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', '\x2', 
		'\x2', '\x2', '\xCA', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\xD4', '\a', 'P', '\x2', '\x2', '\xCD', 
		'\xD4', '\a', '\x30', '\x2', '\x2', '\xCE', '\xD4', '\a', '\x31', '\x2', 
		'\x2', '\xCF', '\xD4', '\x5', '\x1E', '\x10', '\x2', '\xD0', '\xD4', '\a', 
		'K', '\x2', '\x2', '\xD1', '\xD4', '\a', '\x32', '\x2', '\x2', '\xD2', 
		'\xD4', '\x5', ' ', '\x11', '\x2', '\xD3', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xCE', '\x3', 
		'\x2', '\x2', '\x2', '\xD3', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD3', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD4', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\xD6', '\a', 'O', '\x2', '\x2', '\xD6', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\a', 'L', '\x2', 
		'\x2', '\xD8', '\xDA', '\a', 'H', '\x2', '\x2', '\xD9', '\xDB', '\x5', 
		'\x1A', '\xE', '\x2', '\xDA', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xDA', 
		'\xDB', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xE0', '\x3', '\x2', '\x2', 
		'\x2', '\xDC', '\xDD', '\a', 'J', '\x2', '\x2', '\xDD', '\xDF', '\x5', 
		'\x1A', '\xE', '\x2', '\xDE', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE2', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xDE', '\x3', '\x2', '\x2', 
		'\x2', '\xE0', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE3', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE4', '\a', 'I', '\x2', '\x2', '\xE4', '!', '\x3', '\x2', '\x2', '\x2', 
		'\xE5', '\xE9', '\x5', '$', '\x13', '\x2', '\xE6', '\xE8', '\x5', '&', 
		'\x14', '\x2', '\xE7', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xEB', 
		'\x3', '\x2', '\x2', '\x2', '\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\xE9', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xED', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xEE', 
		'\x5', '(', '\x15', '\x2', '\xED', '\xEC', '\x3', '\x2', '\x2', '\x2', 
		'\xED', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\x3', '\x2', 
		'\x2', '\x2', '\xEF', '\xF0', '\a', '\x13', '\x2', '\x2', '\xF0', '\xF1', 
		'\a', 'V', '\x2', '\x2', '\xF1', '\xF2', '\a', 'X', '\x2', '\x2', '\xF2', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', '\a', '\x13', '\x2', 
		'\x2', '\xF4', '\xF5', '\a', 'R', '\x2', '\x2', '\xF5', '\xF6', '\x5', 
		'\x1A', '\xE', '\x2', '\xF6', '\xFA', '\a', 'N', '\x2', '\x2', '\xF7', 
		'\xF9', '\x5', '\f', '\a', '\x2', '\xF8', '\xF7', '\x3', '\x2', '\x2', 
		'\x2', '\xF9', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\xFA', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFB', 
		'%', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFA', '\x3', '\x2', '\x2', 
		'\x2', '\xFD', '\xFE', '\a', '\x13', '\x2', '\x2', '\xFE', '\xFF', '\a', 
		'S', '\x2', '\x2', '\xFF', '\x100', '\x5', '\x1A', '\xE', '\x2', '\x100', 
		'\x104', '\a', 'N', '\x2', '\x2', '\x101', '\x103', '\x5', '\f', '\a', 
		'\x2', '\x102', '\x101', '\x3', '\x2', '\x2', '\x2', '\x103', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '\x104', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x105', '\x3', '\x2', '\x2', '\x2', '\x105', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x106', '\x104', '\x3', '\x2', '\x2', '\x2', '\x107', '\x108', 
		'\a', '\x13', '\x2', '\x2', '\x108', '\x109', '\a', 'T', '\x2', '\x2', 
		'\x109', '\x10D', '\a', 'X', '\x2', '\x2', '\x10A', '\x10C', '\x5', '\f', 
		'\a', '\x2', '\x10B', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\x10D', '\x10B', '\x3', '\x2', '\x2', '\x2', 
		'\x10D', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x10E', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x10F', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x110', '\x111', 
		'\a', '\x13', '\x2', '\x2', '\x111', '\x112', '\a', 'U', '\x2', '\x2', 
		'\x112', '\x113', '\a', 'O', '\x2', '\x2', '\x113', '\x114', '\a', '\x33', 
		'\x2', '\x2', '\x114', '\x115', '\x5', '\x1A', '\xE', '\x2', '\x115', 
		'\x116', '\a', 'N', '\x2', '\x2', '\x116', '\x11D', '\x3', '\x2', '\x2', 
		'\x2', '\x117', '\x118', '\a', '\x13', '\x2', '\x2', '\x118', '\x119', 
		'\a', 'U', '\x2', '\x2', '\x119', '\x11A', '\x5', '\x1A', '\xE', '\x2', 
		'\x11A', '\x11B', '\a', 'N', '\x2', '\x2', '\x11B', '\x11D', '\x3', '\x2', 
		'\x2', '\x2', '\x11C', '\x110', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x117', 
		'\x3', '\x2', '\x2', '\x2', '\x11D', '+', '\x3', '\x2', '\x2', '\x2', 
		'\x11E', '\x11F', '\a', '\x13', '\x2', '\x2', '\x11F', '\x120', '\a', 
		'W', '\x2', '\x2', '\x120', '\x121', '\x5', ' ', '\x11', '\x2', '\x121', 
		'\x122', '\a', 'N', '\x2', '\x2', '\x122', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\x124', '\a', '\x13', '\x2', '\x2', '\x124', '\x125', '\x5', 
		'\x30', '\x19', '\x2', '\x125', '\x12D', '\a', 'Y', '\x2', '\x2', '\x126', 
		'\x128', '\x5', '\x16', '\f', '\x2', '\x127', '\x126', '\x3', '\x2', '\x2', 
		'\x2', '\x128', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x129', '\x127', 
		'\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\x3', '\x2', '\x2', '\x2', 
		'\x12A', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x129', '\x3', 
		'\x2', '\x2', '\x2', '\x12C', '\x12E', '\a', '#', '\x2', '\x2', '\x12D', 
		'\x129', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '/', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x135', '\a', 
		'[', '\x2', '\x2', '\x130', '\x131', '\a', 'Z', '\x2', '\x2', '\x131', 
		'\x132', '\x5', '\x1A', '\xE', '\x2', '\x132', '\x133', '\a', 'M', '\x2', 
		'\x2', '\x133', '\x135', '\x3', '\x2', '\x2', '\x2', '\x134', '\x12F', 
		'\x3', '\x2', '\x2', '\x2', '\x134', '\x130', '\x3', '\x2', '\x2', '\x2', 
		'\x135', '\x138', '\x3', '\x2', '\x2', '\x2', '\x136', '\x134', '\x3', 
		'\x2', '\x2', '\x2', '\x136', '\x137', '\x3', '\x2', '\x2', '\x2', '\x137', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x138', '\x136', '\x3', '\x2', '\x2', 
		'\x2', '\x139', '\x13B', '\x5', '\x34', '\x1B', '\x2', '\x13A', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x13B', '\x13C', '\x3', '\x2', '\x2', '\x2', 
		'\x13C', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13D', '\x3', 
		'\x2', '\x2', '\x2', '\x13D', '\x33', '\x3', '\x2', '\x2', '\x2', '\x13E', 
		'\x13F', '\a', '\x12', '\x2', '\x2', '\x13F', '\x148', '\x5', '\xE', '\b', 
		'\x2', '\x140', '\x144', '\a', '\x3', '\x2', '\x2', '\x141', '\x143', 
		'\x5', '\f', '\a', '\x2', '\x142', '\x141', '\x3', '\x2', '\x2', '\x2', 
		'\x143', '\x146', '\x3', '\x2', '\x2', '\x2', '\x144', '\x142', '\x3', 
		'\x2', '\x2', '\x2', '\x144', '\x145', '\x3', '\x2', '\x2', '\x2', '\x145', 
		'\x147', '\x3', '\x2', '\x2', '\x2', '\x146', '\x144', '\x3', '\x2', '\x2', 
		'\x2', '\x147', '\x149', '\a', '\x4', '\x2', '\x2', '\x148', '\x140', 
		'\x3', '\x2', '\x2', '\x2', '\x148', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'\x149', '\x35', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', '\a', '\x14', 
		'\x2', '\x2', '\x14B', '\x14C', '\x5', '\x38', '\x1D', '\x2', '\x14C', 
		'\x14D', '\a', '_', '\x2', '\x2', '\x14D', '\x14E', '\a', '\x64', '\x2', 
		'\x2', '\x14E', '\x156', '\a', '^', '\x2', '\x2', '\x14F', '\x151', '\x5', 
		'\x16', '\f', '\x2', '\x150', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x151', 
		'\x154', '\x3', '\x2', '\x2', '\x2', '\x152', '\x150', '\x3', '\x2', '\x2', 
		'\x2', '\x152', '\x153', '\x3', '\x2', '\x2', '\x2', '\x153', '\x155', 
		'\x3', '\x2', '\x2', '\x2', '\x154', '\x152', '\x3', '\x2', '\x2', '\x2', 
		'\x155', '\x157', '\a', '#', '\x2', '\x2', '\x156', '\x152', '\x3', '\x2', 
		'\x2', '\x2', '\x156', '\x157', '\x3', '\x2', '\x2', '\x2', '\x157', '\x15C', 
		'\x3', '\x2', '\x2', '\x2', '\x158', '\x159', '\a', '\x14', '\x2', '\x2', 
		'\x159', '\x15A', '\a', '\x62', '\x2', '\x2', '\x15A', '\x15C', '\a', 
		'^', '\x2', '\x2', '\x15B', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x15B', 
		'\x158', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x15D', '\x167', '\a', '\x62', '\x2', '\x2', '\x15E', '\x15F', 
		'\a', '`', '\x2', '\x2', '\x15F', '\x160', '\x5', '\x1A', '\xE', '\x2', 
		'\x160', '\x161', '\a', 'M', '\x2', '\x2', '\x161', '\x167', '\x3', '\x2', 
		'\x2', '\x2', '\x162', '\x163', '\a', '\x61', '\x2', '\x2', '\x163', '\x164', 
		'\x5', '\x12', '\n', '\x2', '\x164', '\x165', '\a', '.', '\x2', '\x2', 
		'\x165', '\x167', '\x3', '\x2', '\x2', '\x2', '\x166', '\x15D', '\x3', 
		'\x2', '\x2', '\x2', '\x166', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x166', 
		'\x162', '\x3', '\x2', '\x2', '\x2', '\x167', '\x168', '\x3', '\x2', '\x2', 
		'\x2', '\x168', '\x166', '\x3', '\x2', '\x2', '\x2', '\x168', '\x169', 
		'\x3', '\x2', '\x2', '\x2', '\x169', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\'', '=', '\x43', 'L', 'U', '\\', 'j', 'n', 'r', 'w', '\x85', '\x87', 
		'\x91', '\x9A', '\xB6', '\xC7', '\xC9', '\xD3', '\xDA', '\xE0', '\xE9', 
		'\xED', '\xFA', '\x104', '\x10D', '\x11C', '\x129', '\x12D', '\x134', 
		'\x136', '\x13C', '\x144', '\x148', '\x152', '\x156', '\x15B', '\x166', 
		'\x168',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Yarn.Compiler
