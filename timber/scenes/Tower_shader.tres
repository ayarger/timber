[gd_resource type="ShaderMaterial" load_steps=3 format=2]

[ext_resource path="res://temp_scripts/TempTowerSprite.png" type="Texture" id=1]

[sub_resource type="Shader" id=13]
code = "shader_type spatial;
render_mode blend_mix; // Enable blending for transparency

uniform sampler2D fowTexture;

uniform vec3 world_position;

uniform float screenPosX = 0.0f;
uniform float screenPosZ = 0.0f;

uniform float screenHeight = 5.0f;
uniform float screenWidth = 5.0f;

uniform sampler2D texture_albedo : hint_albedo;
uniform float alpha_cutout_threshold : hint_range(0, 1) = 0.5;
uniform float static_amount = 0.0; // Amount of static pattern (0 to 1)

uniform float alpha : hint_range(0.0, 1.0) = 1.0; 

float hash(vec2 p) {
    p = fract(p * vec2(123.4, 789.6));
    p += dot(p, p + 45.32);
    return fract(p.x * p.y);
}

void fragment() {
    float visibility_value = texture(fowTexture, vec2((world_position.x - screenPosX) / screenWidth, (world_position.z - screenPosZ) / screenHeight)).r;
    vec4 tex_color = texture(texture_albedo, UV);
    ALBEDO = vec3(tex_color.r, tex_color.g, tex_color.b) * visibility_value;
    ALPHA_SCISSOR = alpha_cutout_threshold;
    if (tex_color.a < alpha_cutout_threshold) {
        discard;
    }
    if (UV.x > visibility_value || UV.y > visibility_value) {
        discard;
    }
    ALPHA = tex_color.a * visibility_value * alpha;
    
    /*
    // Generate noise based on UV and time
    float noise = hash(UV * 30.0 + vec2(0, TIME * 5.0));
    vec3 static_color = mix(tex_color.rgb, tex_color.rgb + noise * static_amount, static_amount);
    ALBEDO = static_color;
    */
}
"

[resource]
shader = SubResource( 13 )
shader_param/world_position = null
shader_param/screenPosX = 0.0
shader_param/screenPosZ = 0.0
shader_param/screenHeight = 5.0
shader_param/screenWidth = 5.0
shader_param/alpha_cutout_threshold = 0.5
shader_param/static_amount = 0.0
shader_param/alpha = 0.5
shader_param/texture_albedo = ExtResource( 1 )
