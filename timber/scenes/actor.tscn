[gd_scene load_steps=11 format=2]
[gd_scene load_steps=13 format=2]

[ext_resource path="res://Components/IsSelectable.tscn" type="PackedScene" id=1]
[ext_resource path="res://Actor.cs" type="Script" id=2]
[ext_resource path="res://circle_256.png" type="Texture" id=3]
[ext_resource path="res://scenes/HasStats.tscn" type="PackedScene" id=4]
[ext_resource path="res://temp_scenes/HealthManager.tscn" type="PackedScene" id=5]
[ext_resource path="res://fogofwartesting/StateManager.cs" type="Script" id=5]
[ext_resource path="res://fogofwartesting/MovementState.cs" type="Script" id=6]
[ext_resource path="res://fogofwartesting/HasTeam.cs" type="Script" id=7]

[sub_resource type="QuadMesh" id=6]

[sub_resource type="Shader" id=9]
code = "shader_type spatial;

uniform sampler2D texture_albedo : hint_albedo;
uniform float alpha_cutout_threshold : hint_range(0, 1) = 0.5;
uniform float static_amount = 0.0; // Amount of static pattern (0 to 1)

// Hash function for procedural noise
float hash(vec2 p) {
    p = fract(p * vec2(123.4, 789.6));
    p += dot(p, p + 45.32);
    return fract(p.x * p.y);
}

void fragment() {
    vec4 tex_color = texture(texture_albedo, UV);
	ALBEDO = vec3(tex_color.r, tex_color.g, tex_color.b);
	
    // Perform alpha cutout
    ALPHA_SCISSOR = alpha_cutout_threshold;
    if(tex_color.a < 0.5f)
        discard;

	/*
    // Generate noise based on UV and time
    float noise = hash(UV * 30.0 + vec2(0, TIME * 5.0));

    // Apply static effect
    vec3 static_color = mix(tex_color.rgb, tex_color.rgb + noise * static_amount, static_amount);

    // Output the final color
    ALBEDO = static_color;*/
}
"

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )
shader_param/alpha_cutout_threshold = 0.5
shader_param/static_amount = 0.8

[sub_resource type="QuadMesh" id=4]

[sub_resource type="SpatialMaterial" id=8]
albedo_texture = ExtResource( 3 )

[node name="actor" type="Spatial" groups=["actors"]]
script = ExtResource( 2 )

[node name="view" type="Spatial" parent="."]
transform = Transform( 1, 0, 0, 0, 0.707107, 0.707107, 0, -0.707107, 0.707107, 0, 0.00941655, 0 )

[node name="mesh" type="MeshInstance" parent="view"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.504038, -0.00558105 )
mesh = SubResource( 6 )
material/0 = SubResource( 10 )

[node name="shadow" type="MeshInstance" parent="."]
transform = Transform( 1.37523, 0, 0, 0, -4.37114e-08, 1, 0, -0.620762, -2.71344e-08, 0, 0.0083809, 0 )
sorting_offset = -1.0
sorting_use_aabb_center = false
cast_shadow = 0
mesh = SubResource( 4 )
material/0 = SubResource( 8 )

[node name="IsSelectable" parent="." instance=ExtResource( 1 )]

[node name="HasStats" parent="." instance=ExtResource( 4 )]

[node name="HealthManager" parent="." instance=ExtResource( 5 )]
[node name="StateManager" type="Node" parent="."]
script = ExtResource( 5 )

[node name="MovingState" type="Node" parent="StateManager"]
script = ExtResource( 6 )

[node name="CombatState" type="Node" parent="StateManager"]

[node name="HasTeam" type="Node" parent="."]
script = ExtResource( 7 )
