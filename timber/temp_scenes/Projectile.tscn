[gd_scene load_steps=15 format=2]

[ext_resource path="res://states/StateManager.cs" type="Script" id=1]
[ext_resource path="res://scenes/Actor.tres" type="Material" id=2]
[ext_resource path="res://scripts/HasTeam.cs" type="Script" id=3]
[ext_resource path="res://temp_scripts/TempTowerSprite.png" type="Texture" id=5]
[ext_resource path="res://circle_256.png" type="Texture" id=6]
[ext_resource path="res://temp_scenes/Projectile.cs" type="Script" id=8]

[sub_resource type="BoxShape" id=2]
extents = Vector3( 0.2, 0.2, 0.2 )

[sub_resource type="QuadMesh" id=1]

[sub_resource type="QuadMesh" id=10]

[sub_resource type="Shader" id=9]
code = "shader_type spatial;

uniform sampler2D fowTexture;

uniform vec3 world_position;

uniform float screenPosX = 0.0f;
uniform float screenPosZ = 0.0f;

uniform float screenHeight = 5.0f;
uniform float screenWidth = 5.0f;

uniform sampler2D texture_albedo : hint_albedo;
uniform float alpha_cutout_threshold : hint_range(0, 1) = 0.5;
uniform float static_amount = 0.0; // Amount of static pattern (0 to 1)


// Hash function for procedural noise
float hash(vec2 p) {
    p = fract(p * vec2(123.4, 789.6));
    p += dot(p, p + 45.32);
    return fract(p.x * p.y);
}

void fragment() {
	float visibility_value = texture(fowTexture,vec2((world_position.x-screenPosX)/screenWidth,((world_position.z-screenPosZ)/screenHeight))).r;
    vec4 tex_color = texture(texture_albedo, UV);
	ALBEDO = vec3(tex_color.r, tex_color.g, tex_color.b) * visibility_value;
	
	if(visibility_value < 0.001f)
		discard;
	
    // Perform alpha cutout
    ALPHA_SCISSOR = alpha_cutout_threshold;
    if(tex_color.a < 0.5f)
        discard;
		
	
	if (UV.x > visibility_value || UV.y > visibility_value)
	{
		discard;
	}
	/*
    // Generate noise based on UV and time
    float noise = hash(UV * 30.0 + vec2(0, TIME * 5.0));

    // Apply static effect
    vec3 static_color = mix(tex_color.rgb, tex_color.rgb + noise * static_amount, static_amount);

    // Output the final color
    ALBEDO = static_color;*/
}"

[sub_resource type="ShaderMaterial" id=11]
shader = SubResource( 9 )
shader_param/world_position = null
shader_param/screenPosX = 0.0
shader_param/screenPosZ = 0.0
shader_param/screenHeight = 5.0
shader_param/screenWidth = 5.0
shader_param/alpha_cutout_threshold = 0.5
shader_param/static_amount = 0.0
shader_param/texture_albedo = ExtResource( 5 )

[sub_resource type="QuadMesh" id=12]

[sub_resource type="Shader" id=7]
code = "shader_type spatial;

uniform sampler2D fowTexture;

uniform vec3 world_position;

uniform float screenPosX = 0.0f;
uniform float screenPosZ = 0.0f;

uniform float screenHeight = 5.0f;
uniform float screenWidth = 5.0f;

uniform sampler2D texture_albedo : hint_albedo;
uniform float alpha_cutout_threshold : hint_range(0, 1) = 0.5;
uniform float static_amount = 0.0; // Amount of static pattern (0 to 1)

uniform float alpha = 0.4f;
uniform vec3 color = vec3(0.0f, 0.0f, 0.0f);

// Hash function for procedural noise
float hash(vec2 p) {
    p = fract(p * vec2(123.4, 789.6));
    p += dot(p, p + 45.32);
    return fract(p.x * p.y);
}

void fragment() {
	float visibility_value = texture(fowTexture,vec2((world_position.x-screenPosX)/screenWidth,((world_position.z-screenPosZ)/screenHeight))).r;
    vec4 tex_color = texture(texture_albedo, UV);
	ALBEDO = color * visibility_value;
	ALPHA = alpha;
	if(visibility_value < 0.001f)
		discard;
	
    // Perform alpha cutout
    //ALPHA_SCISSOR = alpha_cutout_threshold;
    if(tex_color.a < 0.5f)
        discard;
}
"

[sub_resource type="ShaderMaterial" id=13]
shader = SubResource( 7 )
shader_param/world_position = null
shader_param/screenPosX = 0.0
shader_param/screenPosZ = 0.0
shader_param/screenHeight = 5.0
shader_param/screenWidth = 5.0
shader_param/alpha_cutout_threshold = 0.5
shader_param/static_amount = 0.0
shader_param/alpha = 0.4
shader_param/color = Vector3( 0, 0, 0 )
shader_param/texture_albedo = ExtResource( 6 )

[node name="Actor" type="Spatial" groups=["actors"]]
script = ExtResource( 8 )

[node name="RigidBody" type="RigidBody" parent="."]
gravity_scale = 0.0
contacts_reported = 5
contact_monitor = true

[node name="CollisionShape" type="CollisionShape" parent="RigidBody"]
transform = Transform( 2.5, 0, 0, 0, 2.5, 0, 0, 0, 5, 0, 0, 0 )
shape = SubResource( 2 )

[node name="view" type="Spatial" parent="."]
transform = Transform( 1, 0, 0, 0, 0.707107, 0.707107, 0, -0.707107, 0.707107, 0, 0, 0 )

[node name="mesh" type="MeshInstance" parent="view"]
mesh = SubResource( 1 )
material/0 = ExtResource( 2 )

[node name="shadowMesh" type="MeshInstance" parent="view"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -0.006 )
cast_shadow = 3
mesh = SubResource( 10 )
material/0 = SubResource( 11 )

[node name="shadow" type="MeshInstance" parent="."]
transform = Transform( 1.37523, 0, 0, 0, -2.71344e-08, -1, 0, 0.620762, -4.37114e-08, 0, 0.00592619, -0.00592619 )
sorting_offset = -1.0
sorting_use_aabb_center = false
cast_shadow = 0
mesh = SubResource( 12 )
skeleton = NodePath("../view")
material/0 = SubResource( 13 )

[node name="StateManager" type="Node" parent="."]
script = ExtResource( 1 )

[node name="HasTeam" type="Node" parent="."]
script = ExtResource( 3 )
